var tipuesearch = {"pages": [{'title': 'About', 'text': '課程名稱: 協同產品設計實習 - Collaborative Product Design Practice \n 學員作業網站: https://mdecd2025.github.io/hw-41223158 \n 學員作業倉儲:\xa0 https://github.com/mdecd2025/hw-41223158 \n \n 課程代號: cd2025 \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入 \xa0 https://login.microsoftonline.com/ \xa0 Office 365 \n Teams 團隊代碼:\xa0 p5z4eku \n \n 課程評分: \n Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單 \n Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單 \n Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單 \n', 'tags': '', 'url': 'About.html'}, {'title': 'w1', 'text': 'w1 任務 : \n 分組團隊 (Teams) 建立後, 請參考 說明 後, 將各班各學員與各團隊的倉儲與網站連結, 分別放入標題為 list (使用第一階標題) 的網頁中 \n \n 列出組員的倉儲與網頁 \n # 從  Brython 程式庫中的 browser 導入 html, 可用來輸出超文件內容\n# 而所導入的 document 可以指向網頁中的特定 id 內容\nfrom browser import html, document\n# 建立 url 變數與網站中 2a 學員的學號與帳號資料 URL 網誌字串對應\nurl = "https://mde.tw/list/2a.txt"\n# 利用 open() 物件中的 readlines() 方法, 取出網站中的資料並逐行放入數列中, 因此 data 的資料型別為數列\ndata = open(url).readlines()\n# 進行資料查驗時, 印出 data 數列內容\n#print(data)\n# 因為學員資料中的第一列為標題, 因此有效資料從索引值 1 開始\nall_stud = data[1:]\n# 利用 len() 函式查驗 all_stud 數列有幾筆資料, 因為要與前後的字串併接, 因此利用 str() 將整數轉為字串\nprint("總共有 " + str(len(all_stud)) + "名學員")\n# \n# 利用 document[] 取得 id 為 "brython_div1" 的位置, 然後與 brython_div1 變數對應\nbrython_div1 = document["brython_div1"]\n# 利用 Brython 的 "<=" 特殊符號, 將右值帶有字串與超文件內容物件插入 brython_div1 變數所指定的位置\n# 其中利用 html.A 建立 anchor 標註物件, 第一個變數為 anchor 字串, 第二個變數則為 hyper text reference\nbrython_div1 <= "1. " + html.A("2a-ag4", href="https://mdecd2025.github.io/2a-ag4/")+ html.A("(repo)", href="https://github.com/mdecd2025/2a-ag4")\n# 利用 html.BR() 插入 break 標註\nbrython_div1 <= html.BR()\nbrython_div1 <= "2. " + html.A("41223118", href="https://mdecd2025.github.io/hw-zhe41223118/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-zhe41223118")\nbrython_div1 <= html.BR()\nbrython_div1 <= "3. " + html.A("41223122", href="https://mdecd2025.github.io/hw-41223122/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-41223122")\nbrython_div1 <= html.BR()\nbrython_div1 <= "4. " + html.A("41223131", href="https://mdecd2025.github.io/hw-41223131/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-41223131")\nbrython_div1 <= html.BR()\nbrython_div1 <= "5. " + html.A("41223134", href="https://mdecd2025.github.io/hw-41223134/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-41223134")\nbrython_div1 <= html.BR()\nbrython_div1 <= "6. " + html.A("41223136", href="https://mdecd2025.github.io/hw-41223136/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-41223136")\nbrython_div1 <= html.BR()\nbrython_div1 <= "7. " + html.A("41223158", href="https://mdecd2025.github.io/hw-41223158/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-41223158")\n \n 1.\xa0 2a-ag4 (repo) 2.\xa0 41223118 (repo) 3.\xa0 41223122 (repo) 4.\xa0 41223131 (repo) 5.\xa0 41223134 (repo) 6.\xa0 41223136 (repo) 7.\xa0 41223158 (repo) \n', 'tags': '', 'url': 'w1.html'}, {'title': 'w3', 'text': '用程式計算出班上與別班未分組名單，已本班甲班2a為主。 \n import os\nfrom github import Github\n\n# 設定 GitHub Token 與組織名稱\nGITHUB_TOKEN = \'your_token\'  # 🚨 請換成你的 GitHub Token\nORG_NAME = \'mdecd2025\'\nPROXY = \'http://p4.cycu.org:3128\'\n\n# 班上所有學號\nall_students = {\n    "40932134", "41023105", "41023109", "41023111", "41023128", "41023137", "41023150", "41023220", "41023222",\n    "41223101", "41223102", "41223103", "41223104", "41223105", "41223106", "41223107", "41223110", "41223111",\n    "41223112", "41223113", "41223114", "41223116", "41223117", "41223118", "41223119", "41223120", "41223121",\n    "41223122", "41223123", "41223124", "41223125", "41223126", "41223129", "41223130", "41223131", "41223132",\n    "41223133", "41223134", "41223136", "41223137", "41223138", "41223140", "41223141", "41223143", "41223144",\n    "41223146", "41223147", "41223148", "41223149", "41223150", "41223152", "41223153", "41223154", "41223156",\n    "41223157", "41223158", "41271125", "41271131", "41271146", "41271158"\n}\na_all_members = [\'41223154\', \'41271125\', \'41271158\', \'41271146\', \'41271131\', \'CYG41223103\', \'41223102\', \'41023128\', \'41023137\', \'41223137\', \'41223157\', \'41223156\', \'otakuyoyo\', \'41223141\', \'41223113\', \'kim41223114\', \'joeisme1208\', \'41223116\', \'41223144\', \'41223140\', \'41223143\', \'41223138\', \'41223134\', \'41223136\', \'zhe41223118\', \'Spirit0224\', \'yuhao-08\', \'41223158\', \'Ren911308\', \'41223150\', \'Manto8\', \'CYA41223106\', \'yan21ed\', \'Lin41223107\', \'41223133\', \'hong41223129\', \'41223110\', \'41223147\', \'Linjiahong41223125\', \'CHN41223132\', \'Yu-Fang-Hong\', \'41023111\', \'yckaooooo\', \'kolas911205\', \'41023105\', \'40932134\', \'41223104\', \'yan41223101\', \'41223105\', \'41223153\', \'41223120\', \'41223152\', \'G8People\', \'WSE41223112\', \'41223146\', \'41223119\']\ndef get_grouped_members(org_name, token, proxy):\n    """從 GitHub 獲取已分組的成員"""\n    os.environ[\'http_proxy\'] = proxy\n    os.environ[\'https_proxy\'] = proxy\n\n    g = Github(token)\n    grouped_members = set()\n\n    try:\n        org = g.get_organization(org_name)\n        teams = org.get_teams()\n\n        for team in teams:\n            if team.name.lower().startswith(\'g\'):\n                members = team.get_members()\n                for member in members:\n                    grouped_members.add(member.login)\n\n    except Exception as e:\n        print(f"An error occurred: {e}")\n\n    return grouped_members\n\nif __name__ == "__main__":\n    # 取得 GitHub 上的已分組成員\n    grouped_students = get_grouped_members(ORG_NAME, GITHUB_TOKEN, PROXY)\n\n    # 計算未分組的學號\n    ungrouped_students = sorted(all_students - grouped_students)\n\n    # 📌 只輸出未分組學號\n    for student in ungrouped_students:\n        print(student)\n \n \n 未分組學號：\n41023220 | 未分組\n41223111 | 未分組\n41223119 | 未分組\n41223124 | 未分組\n41223148 | 未分組\n \n \n \n', 'tags': '', 'url': 'w3.html'}, {'title': 'w4', 'text': '建立IPv6 位址設定正確運作-1 \n 在太乙網路打上自己的ip跟打上老師給的連接。 \n IPv6 設定: \n 2a 各學員固定 IPv6 分配: 2001:288:6004:17:fff1:cd25:0000:a001 \n 從這個連結找到自己的號碼 :\xa0 \n https://mde.tw/cd2025/downloads/w4_2a_index.txt \n 老師給的連接: gateway: 2001:288:6004:17::254 dns server: 2001:288:6004:17::3 2001:b000:168::1 \n 請按造如圖下: \n \n \n \n 接著從自己的作業網站中找到自己的金輪鑰齒建立ppk檔，僅接步驟如圖下。 \n \n \n \n \n \n', 'tags': '', 'url': 'w4.html'}, {'title': 'w5', 'text': '建立IPv6 位址設定正確運作-2 \n 我用學校電腦做的，並非用自己的電腦完成。 \n 必須要跟此程式一樣，找到自己的檔案更改自己的名稱，還有學號。 \n 步驟如圖下完成: \n 程式樣本: \n \n 程式指令: \n \n 步驟影片如下 :\xa0 \n \n', 'tags': '', 'url': 'w5.html'}, {'title': '組員作業', 'text': '請詳細說明如何採手動方式在 Webots 建立 桌上籃球遊戲機模擬系統的敘述。 \n 步驟 1：創建新世界 \n \n \n 啟動 Webots ： \n \n 打開 Webots 軟體，並進入主介面。 \n \n \n \n 創建新世界 ： \n \n 在 Webots 的主畫面中，選擇  File  >  New World ，這會創建一個名為  untitled.wbt  的新世界。 \n 新創建的世界會有一個預設的地面，並且已經設定了一些基本參數。 \n \n \n \n 步驟 2：設置桌面結構 \n \n \n 新增桌子（Solid） ： \n \n 在  Scene Tree  中，右鍵點選  WorldInfo  節點，選擇  Add  >  Solid ，會在場景中新增一個  Solid  節點。這個  Solid  節點將代表你的桌子。 \n \n \n \n 新增桌面的形狀（Shape） ： \n \n 在  Solid  節點下，右鍵點選  Solid  節點，選擇  Add  >  Shape  >  Box 。這將創建一個長方體來代表桌面。 \n \n \n \n 設定桌子尺寸 ： \n \n 點選  Box  節點，然後在右側的屬性面板中設定  size  參數來調整桌子的大小。假設我們的桌子尺寸是 2 米長，1 米寬，0.1 米高，設定如下： \n \n size 2 0.1 1 \n \n \n 設置桌子的顏色 ： \n \n 點選  Solid  節點，右鍵選擇  Appearance ，然後設定材質的顏色。你可以選擇木色或其他顏色來模擬桌子表面。 \n \n \n \n 步驟 3：創建籃球框 \n \n \n 新增籃框（Solid） ： \n \n 在  Scene Tree  中，右鍵點選  WorldInfo  節點，選擇  Add  >  Solid ，再右鍵選擇新創建的  Solid  節點，選擇  Add  >  Shape  >  Cylinder 。這將創建一個圓柱形的籃框。 \n \n \n \n 設置籃框的大小與位置 ： \n \n 點選  Cylinder  節點，並在右側屬性面板中設定  radius  和  height 。例如： \n \n radius 0.2\nheight 0.05 \n \n 設定  translation  來調整籃框的位置。假設我們要把籃框放置在桌面上方，並放置在桌子的遠端。設定如下： \n \n translation 0 0.6 -0.5 \n 這樣，籃框就會位於桌子的上方，距離桌面的高度為 0.6 米。 \n \n \n 步驟 4：創建籃球 \n \n \n 新增籃球（Solid） ： \n \n 在  Scene Tree  中，右鍵點選  WorldInfo  節點，選擇  Add  >  Solid ，然後右鍵選擇新創建的  Solid  節點，選擇  Add  >  Shape  >  Sphere 。這將創建一個球形的籃球。 \n \n \n \n 設定籃球大小與顏色 ： \n \n 點選  Sphere  節點，在右側屬性面板中設定  radius ，例如將  radius  設定為 0.1 米，代表籃球的直徑為 20 公分。 \n \n radius 0.1 \n \n 設定顏色，為了讓籃球看起來像真實的籃球，可以選擇橙色。這樣籃球就會顯示為橙色。 \n \n \n \n 設定籃球的位置 ： \n \n 設定  translation ，將籃球放置於桌面上方，距離桌面大約 0.2 米。 \n \n translation 0 0.2 -0.5 \n \n \n 步驟 5：設置物理屬性 \n \n \n 設定桌子與籃框的物理屬性 ： \n \n \n 桌子和籃框不需要太多的彈性，但需要摩擦力，這樣物體才能有真實的接觸效果。 \n \n \n 在  Solid  節點中添加物理屬性設定： \n Physics { \n        density 1.0 \n        friction 0.9 \n        bounce 0.0 # 桌子和籃框不會反彈 \n} \n \n \n \n 設定籃球的物理屬性 ： \n \n 籃球需要較高的彈性，以便它能夠反彈。可以設置以下屬性： \n \n Physics {\n    density 0.5\n    friction 0.3\n    bounce 0.7  # 籃球有較高的反彈\n} \n \n \n 步驟 6：創建控制器 \n \n \n 創建 Python 控制器程式 ： \n \n \n 在 Webots 中，你需要使用控制器來控制物體的行為，例如投籃等。創建一個新的 Python 控制器，並將其命名為  basketball_controller.py 。 \n \n \n \n \n 編寫控制器邏輯 ： \n \n 控制器的主要目的是監控籃球的運動，並在籃球進入籃框時進行計分。下面是一個簡單的範例程式，會檢查籃球是否進入籃框範圍。 \n \n 範例程式碼：\n\nfrom controller import Robot\n\n# 創建 robot 物件來控制 Webots 模擬\nrobot = Robot()\ntimestep = int(robot.getBasicTimeStep())\n\n# 獲取籃球的物體\nball = robot.getFromDef("BASKETBALL")\nball_position = ball.getPosition()\n\n# 模擬循環\nwhile robot.step(timestep) != -1:\n    # 更新籃球的位置\n    ball_position = ball.getPosition()\n\n    # 如果籃球進入籃框範圍，則顯示得分訊息\n    if ball_position[0] > 0.5 and ball_position[0] < 1.5 and ball_position[1] > 0.5:\n        print("得分！") \n \n \n \n \n \n 連接控制器與世界 ： \n \n 在 Webots 中，點選  WorldInfo  節點，在屬性面板中找到  controller  屬性，並將其設置為剛創建的控制器程式名稱  basketball_controller.py 。 \n \n \n \n 步驟 7：測試與調整 \n \n \n 啟動模擬 ： \n \n 點選 Webots 上方的  Play  按鈕來啟動模擬。 \n 你應該可以看到籃球在桌子上彈跳，並且控制器會檢測籃球是否進入籃框並顯示得分。 \n \n \n \n 調整參數 ： \n \n 如果籃球的反彈效果或運動不符合預期，可以調整物理屬性（例如彈性、摩擦力、質量）來改善模擬效果。 \n \n \n \n 步驟 8：保存與分享 \n \n \n 保存世界檔案 ： \n \n 在 Webots 中，選擇  File  >  Save  來保存你的  .wbt  檔案。 \n \n \n \n 分享模擬 ： \n \n 你可以將  .wbt  檔案和控制器程式（例如  basketball_controller.py ）一起分享，讓其他人可以使用這個模擬。 \n \n \n \n', 'tags': '', 'url': '組員作業.html'}, {'title': 'task', 'text': '目錄: \n \xa0 \xa0 \xa0 1.\xa0 task1 (自行製作可攜程式系統) \n \xa0 \xa0  \xa02.\xa0 task2 使用 SSH 協定執行作業倉儲的推送 \n \xa0 \xa0 \xa03. task3 使用 Solvespace 建立平面四連桿系統零組件', 'tags': '', 'url': 'task.html'}, {'title': 'task1 (自行製作可攜程式系統)', 'text': '此作業的目的在展示如何利用既有的 Python 可攜系統建立各版本的 Python 可攜環境.影片如下 : \n \n', 'tags': '', 'url': 'task1 (自行製作可攜程式系統).html'}, {'title': 'task2(使用 SSH 協定執行作業倉儲的推送)', 'text': 'SSH \xa0 是一種加密的網路傳輸協定, PuTTY 則是可用於 Windows 環境的 SSH 協定工具, 其中支援遠端登入 (putty.exe) 與檔案傳輸工具 (psftp.exe). \n 使用 PuTTY 所建立的公私鑰進行 Github push 認證的影片步驟如下: \n \n \n 要注意的是 公私鑰要放在相對應的檔案，否則會打不開(如圖下)，其他步驟在w4。 \n \n', 'tags': '', 'url': 'task2(使用 SSH 協定執行作業倉儲的推送).html'}, {'title': 'task3 使用 Solvespace 建立平面四連桿系統零組件', 'text': '下載檔案 :\xa0 /downloads/fourbar41223158_slvs.zip \n \n \n', 'tags': '', 'url': 'task3 使用 Solvespace 建立平面四連桿系統零組件.html'}, {'title': 'Homework', 'text': '\n 作業 (30%) \n HW1 (5%):  建立由 Box 組成的平面四連桿機構 Webots 模擬場景 \n part1: \n 請各學員在 USB 隨身碟或個人電腦上完成 cd2025 課程所需的可攜系統配置: \n 下載  portable_wcm2025.7z  (330MB, 解開壓縮後 1.4GB) \n Webots_2025a.7z  (1.5 GB, 解開後約為 2.9GB, 可單獨運作) \n Webots_2025a_web.7z  (171 MB, 解開壓縮後約為 1GB, 必須連網運作) \n Blender4.2.7z \n part2: \n 請各學員完成可攜程式系統配置後, 利用 Webots R2025a 中寬度與高度都為 0.1m 的 box 物件建立一個簡單的平面四連桿機構模擬場景. \n base (基座) 長度 1m, link1 長度 0.4m, link2 長度 0.6m, link3 長度 0.9m, 各轉軸均為 HingeJoint, joint1 旋轉速度設定為 1radian/sec. \n part3: \n 模擬場景啟動後, 按下 s 鍵機構開始作動, 按下 p 鍵後機構暫停. \n 參考資料: \n cd2025_hw1_demo.7z \n HW2 (5%):  建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景 \n 各學員請利用 CAD 系統依據 HW1 的連桿尺寸與運動方式, 配置適當大小的旋轉軸以及基座後, 利用 Webots R2025a 完成一個簡單的平面四連桿機構模擬場景. \n 參考資料: \n fourbar_slvs.7z \n HW3 (20%): 建立 Webots 桌上籃球遊戲機模擬系統 \n 請各分組利用CAD 系統建立一個能在電腦桌 (1600W X 700D X 740H mm) 上運作的投籃機構 ( 參考影片 )後, 導入 Webots R2025a 套件, 建立一個能由使用者透過鍵盤按鍵操作, 且具備計分板的籃球遊戲機模擬系統. \n 參考資料: \n 參考資料: \n fourbar_ball_throwing_linkage.slvs \n sixbar_ball_throwing_linkage.slvs \n', 'tags': '', 'url': 'Homework.html'}, {'title': 'HW1', 'text': 'HW1 (5%):  建立由 Box 組成的平面四連桿機構 Webots 模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW1 - 學員學號 \n \n', 'tags': '', 'url': 'HW1.html'}, {'title': 'HW2', 'text': 'HW2 (5%):  建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW2 - 學員學號 \n \n', 'tags': '', 'url': 'HW2.html'}, {'title': 'HW3', 'text': 'HW3 (20%): 建立 Webots 桌上籃球遊戲機模擬系統 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW3 - 學員學號 \n \n', 'tags': '', 'url': 'HW3.html'}, {'title': 'Midterm', 'text': '本課程所繳交的期中成績為學員自評之學習期望成績. \n 期中考週的自評期望成績繳交流程: \n \n 整理先前所完成的各週的進度、作業網頁內容以及心得 \n 拍攝期中自評影片, 上傳至 Youtube 後, 以" 國立虎尾科技大學 - 機械設計工程系 - cd2025 期中自評- 學員學號 "為影片標題後嵌入本頁面中 \n 回填期中自評表單 \n 上傳學員期中成績 \n \n 各週進度: \n 各週網頁內容: \n 期中心得: \n 期中自評影片: \n \n \n', 'tags': '', 'url': 'Midterm.html'}, {'title': 'Exam', 'text': 'Exam1 (10%): 建立 Webots 基本物件模擬場景 \n 各學員利用 Webots R2025a 套件中的 Shape 物件, 隨堂建立指定的機電系統模擬場景, 並利用 Python 程式進行互動控制. \n Exam2 (10%): 利用 CAD 零組件建立模擬場景\xa0 \n 各學員利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. \n Exam3 (20%): Webots 機電模擬場景的協同設計 \n 各分組利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. 過程中各學員必須採同步協同模式, 維護從 Github Classroom 取得的分組協同倉儲以及網站. \n 協同分組方式: \n \n 分配學員負責利用 Solvespace 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁. \n 分配學員負責利用 NX2312 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁. \n 分配學員負責利用 Webots 建立機電系統模擬場景, 並利用 Python 程式進行控制, 過程中必須將建構過程拍成帶有說明字幕的影片上傳至分組網頁. \n \n', 'tags': '', 'url': 'Exam.html'}, {'title': 'Exam1', 'text': 'Exam1 (10%): 建立 Webots 基本物件模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam1 - 學員學號 \n', 'tags': '', 'url': 'Exam1.html'}, {'title': 'Exam2', 'text': 'Exam2 (10%): 利用 CAD 零組件建立模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam2 - 學員學號 \n', 'tags': '', 'url': 'Exam2.html'}, {'title': 'Exam3', 'text': 'Exam3 (20%): Webots 機電模擬場景的協同設計 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3 - 學員學號 \n', 'tags': '', 'url': 'Exam3.html'}, {'title': 'Final', 'text': '期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%) \n 題目:  Webots 動態投籃模擬系統的協同設計 \n 說明:  \n 籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上. \n 操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止. \n 請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中. \n 影片標題:  國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題 \n', 'tags': '', 'url': 'Final.html'}, {'title': 'Brython', 'text': '1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};