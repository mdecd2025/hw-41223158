<h1>About</h1>
<p>課程名稱: 協同產品設計實習 - Collaborative Product Design Practice</p>
<p>學員作業網站:<a href="https://mdecd2025.github.io/hw-41223158">https://mdecd2025.github.io/hw-41223158</a></p>
<p>學員作業倉儲: <a href="https://github.com/mdecd2025/hw-41223158">https://github.com/mdecd2025/hw-41223158</a></p>
<hr/>
<p>課程代號: cd2025</p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入<span> </span><a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a><span> </span>Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span>p5z4eku</span></p>
<hr/>
<p>課程評分:</p>
<p style="padding-left: 30px;">Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單</p>
<p style="padding-left: 30px;">Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單</p>
<p style="padding-left: 30px;">Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單</p>
<h1>Integrate</h1>
<p>每週的進度內容，整理如下 </p><h2>w1</h2>
<p><span>w1 任務</span>:</p>
<p>分組團隊 (Teams) 建立後, 請參考<a href="https://mde.tw/cd2025/content/list.html">說明</a>後, 將各班各學員與各團隊的倉儲與網站連結, 分別放入標題為 list (使用第一階標題) 的網頁中</p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/OgzPvtWtm4I" width="560"></iframe></span></p>
<p><span>列出組員的倉儲與網頁</span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false"># 從  Brython 程式庫中的 browser 導入 html, 可用來輸出超文件內容
# 而所導入的 document 可以指向網頁中的特定 id 內容
from browser import html, document
# 建立 url 變數與網站中 2a 學員的學號與帳號資料 URL 網誌字串對應
url = "https://mde.tw/list/2a.txt"
# 利用 open() 物件中的 readlines() 方法, 取出網站中的資料並逐行放入數列中, 因此 data 的資料型別為數列
data = open(url).readlines()
# 進行資料查驗時, 印出 data 數列內容
#print(data)
# 因為學員資料中的第一列為標題, 因此有效資料從索引值 1 開始
all_stud = data[1:]
# 利用 len() 函式查驗 all_stud 數列有幾筆資料, 因為要與前後的字串併接, 因此利用 str() 將整數轉為字串
print("總共有 " + str(len(all_stud)) + "名學員")
# 
# 利用 document[] 取得 id 為 "brython_div1" 的位置, 然後與 brython_div1 變數對應
brython_div1 = document["brython_div1"]
# 利用 Brython 的 "&lt;=" 特殊符號, 將右值帶有字串與超文件內容物件插入 brython_div1 變數所指定的位置
# 其中利用 html.A 建立 anchor 標註物件, 第一個變數為 anchor 字串, 第二個變數則為 hyper text reference
brython_div1 &lt;= "1. " + html.A("2a-ag4", href="https://mdecd2025.github.io/2a-ag4/")+ html.A("(repo)", href="https://github.com/mdecd2025/2a-ag4")
# 利用 html.BR() 插入 break 標註
brython_div1 &lt;= html.BR()
brython_div1 &lt;= "2. " + html.A("41223118", href="https://mdecd2025.github.io/hw-zhe41223118/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-zhe41223118")
brython_div1 &lt;= html.BR()
brython_div1 &lt;= "3. " + html.A("41223122", href="https://mdecd2025.github.io/hw-41223122/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-41223122")
brython_div1 &lt;= html.BR()
brython_div1 &lt;= "4. " + html.A("41223131", href="https://mdecd2025.github.io/hw-41223131/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-41223131")
brython_div1 &lt;= html.BR()
brython_div1 &lt;= "5. " + html.A("41223134", href="https://mdecd2025.github.io/hw-41223134/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-41223134")
brython_div1 &lt;= html.BR()
brython_div1 &lt;= "6. " + html.A("41223136", href="https://mdecd2025.github.io/hw-41223136/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-41223136")
brython_div1 &lt;= html.BR()
brython_div1 &lt;= "7. " + html.A("41223158", href="https://mdecd2025.github.io/hw-41223158/")+ html.A("(repo)", href="https://github.com/mdecd2025/hw-41223158")
</pre>
<p><span>1. </span><a href="https://mdecd2025.github.io/2a-ag4/">2a-ag4</a><a href="https://github.com/mdecd2025/2a-ag4">(repo)</a><br/><span>2. </span><a href="https://mdecd2025.github.io/hw-zhe41223118/">41223118</a><a href="https://github.com/mdecd2025/hw-zhe41223118">(repo)</a><br/><span>3. </span><a href="https://mdecd2025.github.io/hw-41223122/">41223122</a><a href="https://github.com/mdecd2025/hw-41223122">(repo)</a><br/><span>4. </span><a href="https://mdecd2025.github.io/hw-41223131/">41223131</a><a href="https://github.com/mdecd2025/hw-41223131">(repo)</a><br/><span>5. </span><a href="https://mdecd2025.github.io/hw-41223134/">41223134</a><a href="https://github.com/mdecd2025/hw-41223134">(repo)</a><br/><span>6. </span><a href="https://mdecd2025.github.io/hw-41223136/">41223136</a><a href="https://github.com/mdecd2025/hw-41223136">(repo)</a><br/><span>7. </span><a href="https://mdecd2025.github.io/hw-41223158/">41223158</a><a href="https://github.com/mdecd2025/hw-41223158">(repo)</a></p>
<p><br/><br/><br/></p><h2>w3</h2>
<h4>用程式計算出班上與別班未分組名單，已本班甲班2a為主。</h4>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">import os
from github import Github

# 設定 GitHub Token 與組織名稱
GITHUB_TOKEN = 'your_token'  # 🚨 請換成你的 GitHub Token
ORG_NAME = 'mdecd2025'
PROXY = 'http://p4.cycu.org:3128'

# 班上所有學號
all_students = {
    "40932134", "41023105", "41023109", "41023111", "41023128", "41023137", "41023150", "41023220", "41023222",
    "41223101", "41223102", "41223103", "41223104", "41223105", "41223106", "41223107", "41223110", "41223111",
    "41223112", "41223113", "41223114", "41223116", "41223117", "41223118", "41223119", "41223120", "41223121",
    "41223122", "41223123", "41223124", "41223125", "41223126", "41223129", "41223130", "41223131", "41223132",
    "41223133", "41223134", "41223136", "41223137", "41223138", "41223140", "41223141", "41223143", "41223144",
    "41223146", "41223147", "41223148", "41223149", "41223150", "41223152", "41223153", "41223154", "41223156",
    "41223157", "41223158", "41271125", "41271131", "41271146", "41271158"
}
a_all_members = ['41223154', '41271125', '41271158', '41271146', '41271131', 'CYG41223103', '41223102', '41023128', '41023137', '41223137', '41223157', '41223156', 'otakuyoyo', '41223141', '41223113', 'kim41223114', 'joeisme1208', '41223116', '41223144', '41223140', '41223143', '41223138', '41223134', '41223136', 'zhe41223118', 'Spirit0224', 'yuhao-08', '41223158', 'Ren911308', '41223150', 'Manto8', 'CYA41223106', 'yan21ed', 'Lin41223107', '41223133', 'hong41223129', '41223110', '41223147', 'Linjiahong41223125', 'CHN41223132', 'Yu-Fang-Hong', '41023111', 'yckaooooo', 'kolas911205', '41023105', '40932134', '41223104', 'yan41223101', '41223105', '41223153', '41223120', '41223152', 'G8People', 'WSE41223112', '41223146', '41223119']
def get_grouped_members(org_name, token, proxy):
    """從 GitHub 獲取已分組的成員"""
    os.environ['http_proxy'] = proxy
    os.environ['https_proxy'] = proxy

    g = Github(token)
    grouped_members = set()

    try:
        org = g.get_organization(org_name)
        teams = org.get_teams()

        for team in teams:
            if team.name.lower().startswith('g'):
                members = team.get_members()
                for member in members:
                    grouped_members.add(member.login)

    except Exception as e:
        print(f"An error occurred: {e}")

    return grouped_members

if __name__ == "__main__":
    # 取得 GitHub 上的已分組成員
    grouped_students = get_grouped_members(ORG_NAME, GITHUB_TOKEN, PROXY)

    # 計算未分組的學號
    ungrouped_students = sorted(all_students - grouped_students)

    # 📌 只輸出未分組學號
    for student in ungrouped_students:
        print(student)
</pre>
<div class="line number1 index0 alt2">
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">未分組學號：
41023220 | 未分組
41223111 | 未分組
41223119 | 未分組
41223124 | 未分組
41223148 | 未分組
</pre>
<code class="html plain"></code></div>
<div class="line number1 index0 alt2"><code class="html plain"></code></div>
<h2>w4</h2>
<h4><span>建立IPv6 位址設定正確運作-1</span></h4>
<p><span>在太乙網路打上自己的ip跟打上老師給的連接。</span></p>
<p><span style="background-color: #ffcc99;">IPv6 設定:</span></p>
<p>2a 各學員固定 IPv6 分配: 2001:288:6004:17:fff1:cd25:0000:a001<br/><span></span></p>
<p>從這個連結找到自己的號碼 : </p>
<p><a href="https://mde.tw/cd2025/downloads/w4_2a_index.txt">https://mde.tw/cd2025/downloads/w4_2a_index.txt</a></p>
<p><span style="background-color: #ffcc99;">老師給的連接:</span><br/>gateway: 2001:288:6004:17::254<br/>dns server:<br/>2001:288:6004:17::3<br/>2001:b000:168::1</p>
<p><span style="background-color: #ffcc99;">請按造如圖下:</span></p>
<p><span style="background-color: #ffcc99;"></span></p>
<p><span><img alt="" height="309" src="/images/螢幕擷取畫面 2025-04-11 154101.png" width="485"/></span></p>
<p></p>
<p><span style="background-color: #ffcc99;">接著從自己的作業網站中找到自己的金輪鑰齒建立ppk檔，僅接步驟如圖下。</span></p>
<p><span style="background-color: #ffcc99;"><img alt="" height="238" src="/images/螢幕擷取畫面 2025-04-11 161044.png" width="532"/></span></p>
<p><img caption="false" height="438" src="/images/螢幕擷取畫面 2025-04-11 154244.png" width="445"/></p>
<p><img alt="" height="440" src="/images/螢幕擷取畫面 2025-04-11 154310.png" width="443"/></p>
<p><img alt="" height="434" src="/images/螢幕擷取畫面 2025-04-11 154258.png" width="449"/></p>
<p><img alt="" height="288" src="/images/螢幕擷取畫面 2025-04-11 154323.png" width="450"/></p>
<p></p><h2>w5</h2>
<h4><span>建立IPv6 位址設定正確運作-2</span></h4>
<p><span style="background-color: #ffcc99;">我用學校電腦做的，並非用自己的電腦完成。</span></p>
<p><span style="background-color: #ffcc99;">必須要跟此程式一樣，找到自己的檔案更改自己的名稱，還有學號。</span></p>
<p><span style="background-color: #ffcc99;">步驟如圖下完成:</span></p>
<p><span style="background-color: #ffcc99;"><span>程式樣本:</span></span></p>
<p><span><img alt="" height="454" src="/images/螢幕擷取畫面 2025-04-11 153948.png" width="354"/></span></p>
<p><span style="background-color: #ffcc99;">程式指令:</span></p>
<p><span><img alt="" height="416" src="/images/螢幕擷取畫面 2025-04-11 153928.png" width="800"/></span></p>
<p><span style="background-color: #ffcc99;">步驟影片如下 : </span></p>
<p><span style="background-color: #ffcc99;"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/dXoinxrQxjc" width="560"></iframe></span></p>
<p><br/><span style="background-color: #ffcc99;"></span></p><h3>組員作業</h3>
<h4><br/>請詳細說明如何採手動方式在 Webots 建立<span>桌上籃球遊戲機模擬系統的敘述。</span></h4>
<h4><span style="background-color: #00ffff;">步驟 1：創建新世界</span></h4>
<ol>
<li>
<p><strong>啟動 Webots</strong>：</p>
<ul>
<li>打開 Webots 軟體，並進入主介面。</li>
</ul>
</li>
<li>
<p><strong>創建新世界</strong>：</p>
<ul>
<li>在 Webots 的主畫面中，選擇 <code inline="">File</code> &gt; <code inline="">New World</code>，這會創建一個名為 <code inline="">untitled.wbt</code> 的新世界。</li>
<li>新創建的世界會有一個預設的地面，並且已經設定了一些基本參數。</li>
</ul>
</li>
</ol>
<h4><span style="background-color: #00ffff;">步驟 2：設置桌面結構</span></h4>
<ol>
<li>
<p><strong>新增桌子（Solid）</strong>：</p>
<ul>
<li>在 <code inline="">Scene Tree</code> 中，右鍵點選 <code inline="">WorldInfo</code> 節點，選擇 <code inline="">Add</code> &gt; <code inline="">Solid</code>，會在場景中新增一個 <code inline="">Solid</code> 節點。這個 <code inline="">Solid</code> 節點將代表你的桌子。</li>
</ul>
</li>
<li>
<p><strong>新增桌面的形狀（Shape）</strong>：</p>
<ul>
<li>在 <code inline="">Solid</code> 節點下，右鍵點選 <code inline="">Solid</code> 節點，選擇 <code inline="">Add</code> &gt; <code inline="">Shape</code> &gt; <code inline="">Box</code>。這將創建一個長方體來代表桌面。</li>
</ul>
</li>
<li>
<p><strong>設定桌子尺寸</strong>：</p>
<ul>
<li>點選 <code inline="">Box</code> 節點，然後在右側的屬性面板中設定 <code inline="">size</code> 參數來調整桌子的大小。假設我們的桌子尺寸是 2 米長，1 米寬，0.1 米高，設定如下：</li>
</ul>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">size 2 0.1 1</pre>
</li>
<li>
<p><strong>設置桌子的顏色</strong>：</p>
<ul>
<li>點選 <code inline="">Solid</code> 節點，右鍵選擇 <code inline="">Appearance</code>，然後設定材質的顏色。你可以選擇木色或其他顏色來模擬桌子表面。</li>
</ul>
</li>
</ol>
<h4><span style="background-color: #00ffff;">步驟 3：創建籃球框</span></h4>
<ol>
<li>
<p><strong>新增籃框（Solid）</strong>：</p>
<ul>
<li>在 <code inline="">Scene Tree</code> 中，右鍵點選 <code inline="">WorldInfo</code> 節點，選擇 <code inline="">Add</code> &gt; <code inline="">Solid</code>，再右鍵選擇新創建的 <code inline="">Solid</code> 節點，選擇 <code inline="">Add</code> &gt; <code inline="">Shape</code> &gt; <code inline="">Cylinder</code>。這將創建一個圓柱形的籃框。</li>
</ul>
</li>
<li>
<p><strong>設置籃框的大小與位置</strong>：</p>
<ul>
<li>點選 <code inline="">Cylinder</code> 節點，並在右側屬性面板中設定 <code inline="">radius</code> 和 <code inline="">height</code>。例如：</li>
</ul>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">radius 0.2
height 0.05</pre>
<ul>
<li>設定 <code inline="">translation</code> 來調整籃框的位置。假設我們要把籃框放置在桌面上方，並放置在桌子的遠端。設定如下：</li>
</ul>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">translation 0 0.6 -0.5</pre>
<p>這樣，籃框就會位於桌子的上方，距離桌面的高度為 0.6 米。</p>
</li>
</ol>
<h4><span style="background-color: #00ffff;">步驟 4：創建籃球</span></h4>
<ol>
<li>
<p><strong>新增籃球（Solid）</strong>：</p>
<ul>
<li>在 <code inline="">Scene Tree</code> 中，右鍵點選 <code inline="">WorldInfo</code> 節點，選擇 <code inline="">Add</code> &gt; <code inline="">Solid</code>，然後右鍵選擇新創建的 <code inline="">Solid</code> 節點，選擇 <code inline="">Add</code> &gt; <code inline="">Shape</code> &gt; <code inline="">Sphere</code>。這將創建一個球形的籃球。</li>
</ul>
</li>
<li>
<p><strong>設定籃球大小與顏色</strong>：</p>
<ul>
<li>點選 <code inline="">Sphere</code> 節點，在右側屬性面板中設定 <code inline="">radius</code>，例如將 <code inline="">radius</code> 設定為 0.1 米，代表籃球的直徑為 20 公分。</li>
</ul>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">radius 0.1</pre>
<ul>
<li>設定顏色，為了讓籃球看起來像真實的籃球，可以選擇橙色。這樣籃球就會顯示為橙色。</li>
</ul>
</li>
<li>
<p><strong>設定籃球的位置</strong>：</p>
<ul>
<li>設定 <code inline="">translation</code>，將籃球放置於桌面上方，距離桌面大約 0.2 米。</li>
</ul>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">translation 0 0.2 -0.5</pre>
</li>
</ol>
<h4><span style="background-color: #00ffff;">步驟 5：設置物理屬性</span></h4>
<ol>
<li>
<h4><strong>設定桌子與籃框的物理屬性</strong>：</h4>
<ul>
<li>
<h4>桌子和籃框不需要太多的彈性，但需要摩擦力，這樣物體才能有真實的接觸效果。</h4>
</li>
</ul>
<h4>在 <code inline="">Solid</code> 節點中添加物理屬性設定：</h4>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">Physics { 
        density 1.0 
        friction 0.9 
        bounce 0.0 # 桌子和籃框不會反彈 
}</pre>
<h4><br/><br/></h4>
</li>
<li>
<p><strong>設定籃球的物理屬性</strong>：</p>
<ul>
<li>籃球需要較高的彈性，以便它能夠反彈。可以設置以下屬性：</li>
</ul>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">Physics {
    density 0.5
    friction 0.3
    bounce 0.7  # 籃球有較高的反彈
}</pre>
</li>
</ol>
<h4><span style="background-color: #00ffff;">步驟 6：創建控制器</span></h4>
<ol>
<li>
<h4><strong>創建 Python 控制器程式</strong>：</h4>
<ul>
<li>
<h4>在 Webots 中，你需要使用控制器來控制物體的行為，例如投籃等。創建一個新的 Python 控制器，並將其命名為 <code inline="">basketball_controller.py</code>。</h4>
</li>
</ul>
</li>
<li>
<p><strong>編寫控制器邏輯</strong>：</p>
<ul>
<li>控制器的主要目的是監控籃球的運動，並在籃球進入籃框時進行計分。下面是一個簡單的範例程式，會檢查籃球是否進入籃框範圍。</li>
<li>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">範例程式碼：

from controller import Robot

# 創建 robot 物件來控制 Webots 模擬
robot = Robot()
timestep = int(robot.getBasicTimeStep())

# 獲取籃球的物體
ball = robot.getFromDef("BASKETBALL")
ball_position = ball.getPosition()

# 模擬循環
while robot.step(timestep) != -1:
    # 更新籃球的位置
    ball_position = ball.getPosition()

    # 如果籃球進入籃框範圍，則顯示得分訊息
    if ball_position[0] &gt; 0.5 and ball_position[0] &lt; 1.5 and ball_position[1] &gt; 0.5:
        print("得分！")</pre>
</li>
</ul>
<p></p>
</li>
<li>
<p><strong>連接控制器與世界</strong>：</p>
<ul>
<li>在 Webots 中，點選 <code inline="">WorldInfo</code> 節點，在屬性面板中找到 <code inline="">controller</code> 屬性，並將其設置為剛創建的控制器程式名稱 <code inline="">basketball_controller.py</code>。</li>
</ul>
</li>
</ol>
<h4><span style="background-color: #00ffff;">步驟 7：測試與調整</span></h4>
<ol>
<li>
<p><strong>啟動模擬</strong>：</p>
<ul>
<li>點選 Webots 上方的 <code inline="">Play</code> 按鈕來啟動模擬。</li>
<li>你應該可以看到籃球在桌子上彈跳，並且控制器會檢測籃球是否進入籃框並顯示得分。</li>
</ul>
</li>
<li>
<p><strong>調整參數</strong>：</p>
<ul>
<li>如果籃球的反彈效果或運動不符合預期，可以調整物理屬性（例如彈性、摩擦力、質量）來改善模擬效果。</li>
</ul>
</li>
</ol>
<h4><span style="background-color: #00ffff;">步驟 8：保存與分享</span></h4>
<ol>
<li>
<p><strong>保存世界檔案</strong>：</p>
<ul>
<li>在 Webots 中，選擇 <code inline="">File</code> &gt; <code inline="">Save</code> 來保存你的 <code inline="">.wbt</code> 檔案。</li>
</ul>
</li>
<li>
<p><strong>分享模擬</strong>：</p>
<ul>
<li>你可以將 <code inline="">.wbt</code> 檔案和控制器程式（例如 <code inline="">basketball_controller.py</code>）一起分享，讓其他人可以使用這個模擬。</li>
</ul>
</li>
</ol>
<h2>w6</h2>
<p><span>請注意, <span style="background-color: #ff9900;">所有 world 的存檔必須要將模擬時間轉為 0</span></span>, 否則所存的變數狀態將為該時間的模擬結果.</p>
<p><a href="https://cyberbotics.com/doc/guide/tutorial-1-your-first-simulation-in-webots?tab-language=python">Tutorial 1</a><span> </span>重點摘要:</p>
<p>將 <a href="http://229.cycu.org/Webots_2025a_web.7z">Webots_2025a_web.7z</a> 解開壓縮後放入可攜套件 (<a href="http://229.cycu.org/portable_wcm2025.7z">portable_wcm2025.7z</a>) 的 data 目錄中.</p>
<p>因為 start.bat 中已經宣告 Python 所在位置, 並將執行 webotsw.exe 所在的目錄放入 Windows 的命令搜尋路徑變數中 (path).</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">REM for Webots
set PYTHON_PATH=%Disk%:\Python313
 
REM for webots
set  path_webots=%Disk%:\Webots_2025a\msys64\mingw64\bin;%Disk%:\Webots_2025a\msys64\usr\bin</pre>
<p><span>當起始一個 Webots project, 需要至少建立 worlds、controllers、protos 等三個目錄, 而且 Robot 的</span><span>控制器程式必須放入 controllers 目錄, 且控制程式檔名必須與子目錄相同</span><span>.</span></p>
<h2>w7</h2>
<ol>
<li>各 Solid - Shape - geometry 在建立 open chain 機構時, 可以在尚未設定 physics 之前單軸運轉, 但 Webots 牽涉需要模擬 closed chain 機構時, 各 Solid - Shape -geometry 則必須設定 boundingObject 與 physics 才能透過 solidReference 進行 dynamics 聯立運算. 亦即 Webots 在模擬封閉機構時, 只能處理 Dynamics 模擬, 原因是其模擬運算是從<span> </span><a href="https://www.ode.org/">ODE</a><span> </span>動力程式庫修改而來, 並沒有附加 closed chain 的 kinematics 運算.</li>
<li>當個別 link 採 box 建立時, 為了要符合其 kinematics 運動約束條件, 各桿件的起始條件必須滿足 fourbar linkage 的約束條件, 因此只有 link1 旋轉 90 度, 可以在 x 與 y 軸同動的情況下無需透 pose 進行局部座標轉換, 但 link2 與 link3 在納入 Shape 之前必須立 pose 節點置入額外的座標轉換.</li>
<li>各 link 的 boundingObject 欄位, 可以透過其 link Shape 採 USE 的方式重用.</li>
<li>最後 joint4 的旋轉中心則透過 solidReference 與 link3 的端點座標重合, 才能完成 closed chain 的動力約束條件模擬</li>
</ol>
<p>     <span style="color: #000000; background-color: #ff9900;">下載檔案 : <span style="background-color: #ffffff;"><a href="/downloads/41223158 fourbar_shooter_w7.7z" style="background-color: #ffffff;">/downloads/41223158 fourbar_shooter_w7.7z</a></span></span></p>
<p><span style="color: #000000; background-color: #ff9900;"><span style="background-color: #ffffff;"><img alt="" height="290" src="/images/螢幕擷取畫面 2025-04-24 044532.png" width="465"/></span></span></p>
<p> <span style="background-color: #ff9900;">投球機零件影片 : </span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/4wOPzQfoPic" width="560"></iframe></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/J3EfwDlwDJw" width="560"></iframe></p>
<p><span style="background-color: #ff9900;">投球機組合件 : <span style="background-color: #ffffff;"></span></span></p>
<p><span style="background-color: #ff9900;"><span style="background-color: #ffffff;"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/xo4yxNbMaAk" width="560"></iframe></span></span></p>
<h2>w8</h2>
<p class="" data-end="107" data-start="49"><span> 複習 </span><a href="https://cyberbotics.com/doc/reference/solidreference">SolidReference</a><span> </span> 是一種引用類型，用於 <code data-end="84" data-start="77">Joint</code> 節點的 <code data-end="99" data-start="89">endPoint</code> 欄位，可指向：</p>
<ol data-end="208" data-start="109">
<li class="" data-end="163" data-start="109">
<p class="" data-end="163" data-start="112"><span style="background-color: #ff9900;"><strong data-end="124" data-start="112">現有 Solid</strong></span>：例如機械零件，但必須與該 Joint 同屬某個共同上層 Solid 的後代。</p>
</li>
<li class="" data-end="208" data-start="164">
<p class="" data-end="208" data-start="167"><strong data-end="198" data-start="167">靜態環境 <code data-end="196" data-start="174">&lt;static environment&gt;</code></strong>：如地面或固定基座。</p>
</li>
</ol>
<p class="" data-end="219" data-start="210"><strong data-end="219" data-start="210"><span style="background-color: #ff9900;">應用說明</span>：</strong></p>
<ul data-end="433" data-start="221">
<li class="" data-end="334" data-start="221">
<p class="" data-end="334" data-start="223">若在 <span style="background-color: #ff9900;"><strong data-end="245" data-start="226">fourbar linkage</strong></span> 中，將 <code data-end="258" data-start="250">joint4</code> 設於 base 的最右端，並將其 <code data-end="286" data-start="276">endPoint</code> 指向 <code data-end="297" data-start="290">link3</code>，則符合「joint 與 solid 為共同上層 base 的後代」條件。</p>
</li>
<li class="" data-end="433" data-start="335">
<p class="" data-end="433" data-start="337">或者，將 <code data-end="350" data-start="342">joint4</code> 設於 <code data-end="361" data-start="354">link3</code> 末端，並讓其 <code data-end="379" data-start="369">endPoint</code> 指向 <code data-end="405" data-start="383">&lt;static environment&gt;</code>，則可將 <code data-end="417" data-start="410">link3</code> 固定於地面，達成相同閉合效果。</p>
</li>
</ul>
<h2>w9</h2>
<p><span>本週統整先前所完成的進度內容，並拍成自己的yt影片，自評期望成績並填寫表單。</span></p>
<p>詳細目錄 : <a href="/get_page/Midterm">進度內容</a></p>
<p></p>
<h2>w10</h2>
<p>1. 最新的可攜程式系統與套件版本:</p>
<p><a href="http://229.cycu.org/portable_wcm2025_w10.7z">portable_wcm2025_w10.7z</a></p>
<p><em><strong>2.</strong></em><span> 已知如何自行建立各種版本的 Python 可攜系統：</span></p>
<p><span><a href="https://mdecd2025.github.io/hw-41223158/content/task1%20(%E8%87%AA%E8%A1%8C%E8%A3%BD%E4%BD%9C%E5%8F%AF%E6%94%9C%E7%A8%8B%E5%BC%8F%E7%B3%BB%E7%B5%B1).html">(自行製作可攜程式系統)</a>  <a href="https://mde.tw/cd2025/content/Portable.html">(Portable)</a></span></p>
<p><span><em><strong>3.</strong></em> 已知哪一個版本 <span style="background-color: #ffff00;">SciTE 較為穩定</span>：</span></p>
<p><span>wscite 為 5.5.5 版 (<a href="http://229.cycu.org/wscite_5.5.5.7z">wscite_5.5.5.7z</a>, 解開壓縮檔案後取代 5.5.4 版的 wscite 目錄)</span></p>
<p><span>4. 已知如何使用 Codespaces 管理個人與協同分組的倉儲:</span></p>
<p><span>./init_replit (處理 codespaces 上的 python 模組, 令其可執行 <span style="background-color: #ffff00;">python main.py</span> 與 <span style="background-color: #ffff00;">python main2.py</span>)</span></p>
<p><span><strong><em>5.</em></strong> 已知可以透過 token 或 Github session 管理管理個人與協同分組的倉儲：</span></p>
<p>.git/config 中 url 將 token 放入即可取得權限 (透過 https)</p>
<p>利用 puttygen.exe 建立 keys, 然後以 session 取得維護倉儲的權限.</p>
<p><a href="https://mdecd2025.github.io/hw-41223158/content/task2(%E4%BD%BF%E7%94%A8%20SSH%20%E5%8D%94%E5%AE%9A%E5%9F%B7%E8%A1%8C%E4%BD%9C%E6%A5%AD%E5%80%89%E5%84%B2%E7%9A%84%E6%8E%A8%E9%80%81).html">(使用 SSH 協定執行作業倉儲的推送)</a> (<a href="https://mde.tw/cd2025/content/SSH.html">SSH</a>)</p>
<p><strong>6.</strong><span> 已知哪一個版本的 Webots 較為穩定：</span></p>
<p><span>已知 Webots 2025a 有不少 bugs, 其中包括<span style="background-color: #ffff00;">操作過程閃退</span>以及<span style="background-color: #ffff00;">無法使用 Transform 節點</span>, 因此可以換為 <a href="http://229.cycu.org/Webots_2023b.7z">Webots_2023b.7z</a> 版.</span></p>
<p><span>7. 已知如何更新個人與協同分組的倉儲, 以便套用所分配的 <a href="https://mde.tw/cd2025/content/IPv6.html">IPv6 位址</a>啟動網際協同流程:</span></p>
<p><span>w4 之前的學員作業倉儲版本，無法在 IPv6 位址設定時正確運作，必須下載 <a href="http://229.cycu.org/cmsimde_w4.7z">cmsimde_w4.7z</a>，解開壓縮檔案後，替換倉儲中的 cmsimde 目錄，並更改 init.py 中將 ip 設為所分配的 <a href="https://mde.tw/cd2025/content/IPv6.html">IPv6 address</a></span></p>
<p><span><strong><em>8.</em></strong> 已知投籃機的零組件可以透過 Solvespace 與 Onshape 繪製，其中前者簡便而後者有利於協同：</span></p>
<p><span>     <a href="https://mdecd2025.github.io/hw-41223158/content/w7.html">(w7)</a></span></p>
<p><span>9. 已知如何利用 Solid - Shape - Box 或 Solid - CadShape 建立封閉式多連桿機構模擬, (若希望直接更改零組件顏色, 則可以使用 Solid - Shape - Mesh 進行多連桿機構進行組立:</span></p>
<p><span>下載檔案 : <a href="https://mdecd2025.github.io/hw-41223158/downloads/41223158%20cd2025_webots_hw1.7z">/downloads/41223158 cd2025_webots_hw1.7z</a></span></p>
<p><span>可透過教學進行步驟 :　<a href="https://mde.tw/cd2025/content/Fourbar.html">（Fourba）</a></span></p>
<p><span>１0. 已知可以透過 Solid - Shape - Mesh 中 material 的名稱, 以控制器程式改變顏色, 進而製作出七段顯示模擬器:</span></p>
<p>11. 已知可以透過 boundingObject 中的 Mesh 設定, 讓封閉連桿執行投籃動作, 且經由紅外線距離感測紀錄是否得分:</p>
<p><span>12. 接下來若要利用各組員所分配的 </span><a href="https://mde.tw/cd2025/content/IPv6.html">IPv6 位址</a><span>配置一台具備 https 連線用的網際協同伺服器, 建議使用 Virtualbox 或 </span><a href="https://www.vmware.com/products/desktop-hypervisor/workstation-and-fusion">VMWare Workstation</a><span> 加上 Nginx, Stunnel 或直接採 cmsimde 進行設定.</span></p>
<p><span>13. 投籃機與籃框的移動裝置則可採用 <a href="https://www.cyberbotics.com/doc/guide/youbot?version=cyberbotics:R2019a-rev1#!">Kuka 套件項下</a>的 <a href="https://mde.tw/cd2025/content/Youbot_cart.html">Youbot</a> <a href="https://en.wikipedia.org/wiki/Mecanum_wheel">Mecanum</a> 輪底座.</span></p>
<p>14. <span style="background-color: #99cc00;">(參考)</span> 對於 webotsw --stream 在近端啟動伺服器的部分尚未完成, 目前僅能透過官方網站擷取 Webotsview.js, 具體問題在於 webots 串流伺服器啟動後, 不接受跨網域擷取 Webotsview.js, 亦即必須處理伺服器間的 Access-Control-Allow-Origin（CORS）議題. 自行<span> </span><a href="https://github.com/cyberbotics/webots/wiki/Windows-installation/">build webotsw.exe</a><span> </span>應該就可以克服此一問題.</p>
<p>15. <span style="background-color: #99cc00;">(參考)</span> 另外 Webots stream server 目前僅接受多 client 檢視, 而不支援跨 server 執行 controller 指令, 若要在系統模擬架構下進行多人同步協同 (類似 CoppeliaSim 的串流控制), 則必須自行處理.</p>
<p></p>
<h2>w11</h2>
<p><span><span style="background-color: #99ccff;">webots 小組協同</span>模擬與<span style="background-color: #99ccff;">fourbar_box</span>複習</span></p>
<p><span></span></p>
<h2>w12</h2>
<p><span>本週開始需依照<span style="background-color: #ccffff;">team</span>上，在規定時間完成<span style="background-color: #ccffff;">對應的HW、Exam等網頁內容</span>，並在<span style="background-color: #ccffff;">規定時間內完成表單填寫</span>。</span></p><h1>task</h1>
<p>目錄:</p>
<p>     <b><i>1. </i></b><span>task1 (自行製作可攜程式系統)</span></p>
<p>    <em> 2. </em>task2 使用 SSH 協定執行作業倉儲的推送</p>
<p>     3. task3 使用 Solvespace 建立平面四連桿系統零組件</p>
<p>     4.task4 查驗是否有學員加入錯誤的班級組別</p>
<p>     5.task5 Webots Tutorial</p>
<p>       分頁 :  Blender、<span>Webots </span></p>
<p>     6.<span>task6  </span>Webots Tutorial 4 ~6 (HW3)</p><h3>task1 (自行製作可攜程式系統)</h3>
<p><span>此作業的目的在展示如何利用既有的 Python 可攜系統建立各版本的 Python 可攜環境.影片如下 :</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/qdga364f-9k" width="560"></iframe></p>
<p></p><h2>task2(使用 SSH 協定執行作業倉儲的推送)</h2>
<p><a href="https://zh.wikipedia.org/zh-tw/Secure_Shell">SSH</a><span> </span>是一種加密的網路傳輸協定, PuTTY 則是可用於 Windows 環境的 SSH 協定工具, 其中支援遠端登入 (putty.exe) 與檔案傳輸工具 (psftp.exe).</p>
<p>使用 PuTTY 所建立的公私鑰進行 Github push 認證的影片步驟如下:</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/dXoinxrQxjc" width="560"></iframe></p>
<p></p>
<p>要注意的是<span>公私鑰要放在相對應的檔案，否則會打不開(如圖下)，其他步驟在w4。</span></p>
<p><span><img alt="" height="399" src="/images/螢幕擷取畫面 2025-04-11 154323.png" width="623"/></span></p>
<h2>task3 使用 Solvespace 建立平面四連桿系統零組件</h2>
<p>下載檔案 : <a href="/downloads/fourbar41223158_slvs.zip">/downloads/fourbar41223158_slvs.zip</a></p>
<p><img alt="" height="294" src="/images/螢幕擷取畫面 2025-04-24 044614.png" width="471"/></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/fnbHD_yTbd8" width="560"></iframe></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/oz9I75hMxlI" width="560"></iframe></p>
<p></p>
<h2>task4 查驗是否有學員加入錯誤的班級組別</h2>
<p>因為上列程式已經給出兩班當時已經參與分組的學員 Github 帳號, 因此只需要從<span> </span><a href="https://mde.tw/list/2b.txt">https://mde.tw/list/2b.txt</a> 讀取學員的學號與 Github 帳號, 並且在 for 迴圈中, 逐一用學員的 Github 帳號相對於各班已經參與分組的學員 Github 帳號, 並且列出特定學員的 Github 帳號不在前述已經參與分組的學員帳號數列中, 即可列出截至當時尚未那組的學員學號.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">import requests

# Step 1: 下載甲班學員資料
url = "https://mde.tw/list/2a.txt"
response = requests.get(url)
data = response.text.splitlines()

# Step 2: 去除標題列
all_stud = data[1:]

# Step 3: 甲班已知 GitHub 名單
a_all_members = [
    '41223154', '41271125', '41271158', '41271146', '41271131', 'CYG41223103',
    '41223102', '41023128', '41023137', '41223137', '41223157', '41223156',
    'otakuyoyo', '41223141', '41223113', 'kim41223114', 'joeisme1208', '41223116',
    '41223144', '41223140', '41223143', '41223138', '41223134', '41223136',
    'zhe41223118', 'Spirit0224', 'yuhao-08', '41223158', 'Ren911308', '41223150',
    'Manto8', 'CYA41223106', 'yan21ed', 'Lin41223107', '41223133', 'hong41223129',
    '41223110', '41223147', 'Linjiahong41223125', 'CHN41223132', 'Yu-Fang-Hong',
    '41023111', 'yckaooooo', 'kolas911205', '41023105', '40932134', '41223104',
    'yan41223101', '41223105', '41223153', '41223120', '41223152', 'G8People',
    'WSE41223112', '41223146', '41223119'
]

# Step 4: 篩選缺少 GitHub 的學號
missing = []

print("甲班：")
for i in all_stud:
    stud = i.strip().split("\t")
    stud_num = stud[0]
    stud_github = stud[1]
    if stud_github not in a_all_members:
        print(stud_num)
        missing.append(stud_num)

# Step 5: 儲存結果到檔案
with open("missing_github_2a.txt", "w", encoding="utf-8") as f:
    f.write("以下同學的 GitHub 未在名單中：\n")
    for stud_num in missing:
        f.write(f"{stud_num}\n")
</pre>
<h2>task5 Webots Tutorial</h2>
<p><span style="background-color: #ff99cc;">1.請用繁體中文詳細說明下列資料: <a href="https://cyberbotics.com/doc/guide/introduction-to-webots" style="background-color: #ff99cc;">https://cyberbotics.com/doc/guide/introduction-to-webots </a></span></p>
<p>Q1：什麼是Webots?</p>
<p>Webots是一款專業的移動機器人模擬軟件，提供了3D虛擬環境，支持物理屬性設計，並且可創建不同類型的機器人(輪式、腿式、飛行)，並添加傳感器和執行器。支持單獨編程機器人以實現特定行為，提供大量模型和示例。模擬成功後，可以將程序轉移至真實的機器人，支持擴展新接口。</p>
<p>Q2：我可以用Webots做什麼?</p>
<p>應用領域：適用在移動機器人原型設計、運動研究、多代理系統、適應行為研究。</p>
<p>行業範圍：涵蓋學術、汽車、航空、吸塵器、玩具等行業。</p>
<p>教育用途：支持機器人學和編程教學（C/C++/Java/Python）</p>
<p>競賽：可用於機器人比賽。</p>
<p><span>Q3：要使用Webots，我需要知道什麼?</span></p>
<ol>
<li>程式語言知識 ：需具備<span>C、C++、Java、Python或MATLAB</span>的基本知識來撰寫機器人控制器。若不熟悉語言可使用<span>簡單圖形化程式語言BotStudio編程</span>(適用於e-puck和Hemisson機器人)</li>
<li>3D模型創建：需了解<span>3D電腦圖形</span>和<span>VRML97</span>描述語言。</li>
</ol>
<p>Q4：什麼是世界?</p>
<ul>
<li>世界定義：描述3D涵蓋機器人及其環境的所有屬性(如位置、方向、幾何、外觀、物理屬性等)</li>
<li>層次結構：物件以層次方式組織，可包含其他物件(輪子、感測器、關節等)</li>
<li>功能與限制：(.wbt)不含控制器程示碼，只指定每個機器人所需的控制器名稱。</li>
<li>儲存位置：檔案以".wbt"格式儲存，位於Webots專案的"worlds"子目錄</li>
</ul>
<p>Q5：什麼是控制器?</p>
<ol>
<li>控制器定義：控制器是用來控制world檔案中機器人的電腦程式</li>
<li>運行機制：模擬開始時，Webots為每個機器人啟動獨立的控制進程，多個機器人可共用同一程式碼，但每個機器人有獨立進程。</li>
<li>儲存位置：控制器檔案儲存在專案的"controllers"子目錄</li>
</ol>
<p>這是Webots中控制器的<span>核心概念</span>，<span>強調其獨立性與語言支援的多樣性</span>。</p>
<p>Q6：什麼是監督控制器?</p>
<ol>
<li>監督控制器定義：當機器人的<span>supervisor欄位設為TURE<span>，控制器成為監督控制器。能執行人類操作員的任務，而非真實機器人能完成的動作。</span><span></span></span></li>
<li><span><span>特權操作：與一般控制器不同，監督控制器擁有特權功能，包括模擬控制，如隨機移動機器人、錄製模擬影片等。</span></span></li>
</ol>
<p><span style="background-color: #ff99cc;">2.請整理網頁中重要的英文單字與用法, 並且針對其中所使用的英文文法逐句說明.</span></p>
<ol data-end="1116" data-start="38">
<li data-end="175" data-start="38">
<p data-end="77" data-start="41"><strong data-end="68" data-start="41">Mobile robot simulation</strong>（移動機器人模擬）</p>
<strong data-end="89" data-start="83">差異</strong>：英文中的「simulation」指的是在虛擬環境中模擬機器人行為，而中文「模擬」同樣表示模仿，但在某些語境下，可能沒有英文「simulation」那麼強烈的虛擬環境暗示。</li>
<li data-end="282" data-start="177">
<p data-end="209" data-start="180"><strong data-end="201" data-start="180">Rapid prototyping</strong>（快速原型設計）</p>
<strong data-end="221" data-start="215">差異</strong>：英文「prototyping」具體指「製作原型」這個過程，而中文「原型設計」更偏向結果導向，較少強調「製作過程」的含義。</li>
<li data-end="396" data-start="284">
<p data-end="315" data-start="287"><strong data-end="309" data-start="287">Physics properties</strong>（物理屬性）</p>
<strong data-end="327" data-start="321">差異</strong>：英文「properties」除了「屬性」，也可以指物理環境中的具體特徵和參數，而中文的「屬性」更多強調事物的性質，而不一定包含具體數值。</li>
<li data-end="542" data-start="398">
<p data-end="429" data-start="401"><strong data-end="423" data-start="401">Locomotion schemes</strong>（移動方式）</p>
<strong data-end="441" data-start="435">差異</strong>：英文「locomotion」特指機器人或動物的移動方式，包括步行、飛行等具體方式；而中文「移動」泛指動作，涵蓋範圍更廣泛。英文「schemes」強調設計、計劃的結構，但中文「方式」沒有強烈的規劃意味。</li>
<li data-end="637" data-start="544">
<p data-end="575" data-start="547"><strong data-end="569" data-start="547">Controller program</strong>（控制程式）</p>
<strong data-end="587" data-start="581">差異</strong>：英文「controller」強調設備或程式的控制功能，而中文「控制」可能更多指行為，而非具體裝置。</li>
<li data-end="740" data-start="639">
<p data-end="665" data-start="642"><strong data-end="658" data-start="642">Robot models</strong>（機器人模型）</p>
<strong data-end="677" data-start="671">差異</strong>：英文「model」不僅指模型，還可以包含系統設計的概念，而中文「模型」更偏向於外形或結構，缺乏英文中「概念模型」的深層意義。</li>
<li data-end="848" data-start="742">
<p data-end="773" data-start="745"><strong data-end="767" data-start="745">Swarm intelligence</strong>（群體智能）</p>
<strong data-end="785" data-start="779">差異</strong>：英文「swarm」特指動物或機器人的群體行動，並且有合作與集體行為的含義，而中文「群體」也可指單純的個體聚集，未必強調合作。</li>
<li data-end="961" data-start="850">
<p data-end="880" data-start="853"><strong data-end="874" data-start="853">Genetic algorithm</strong>（遺傳算法）</p>
<strong data-end="892" data-start="886">差異</strong>：英文「genetic」在此術語中引用遺傳學理論，而中文「遺傳」通常與生物學相關，在技術環境下可能需要具體說明該算法如何模仿生物遺傳過程。</li>
<li data-end="1072" data-start="963">
<p data-end="991" data-start="966"><strong data-end="985" data-start="966">Neural networks</strong>（神經網絡）</p>
<strong data-end="1003" data-start="997">差異</strong>：英文中的「neural」源於生物神經系統，並引申至機器學習模型，而中文「神經」更多指生物概念，除非在明確的技術背景下才會引申至計算領域。</li>
<li data-end="1116" data-start="1074">
<p data-end="1116" data-start="1078"><strong data-end="1110" data-start="1078">Artificial intelligence (AI)</strong>（人工智能）</p>
<strong data-end="1128" data-start="1122">差異</strong>：英文「artificial intelligence」是技術術語，指模擬人類智能的系統，中文「人工智能」直接翻譯，但中文的「人工」有時強調「人為」製造，可能略有不同的語感。</li>
</ol>
<ol data-end="1255" data-start="1217" start="11">
<li data-end="1255" data-start="1217"><strong data-end="1246" data-start="1221">Supervisor controller</strong>（監督者控制程式）<strong data-end="1267" data-start="1261">差異</strong>：英文「supervisor」在此指具有高級管理功能的控制器，而中文「監督者」更多強調「人」的角色，控制程式翻譯時可能會弱化其技術層面的管理權限含義。</li>
</ol>
<ol data-end="1380" data-start="1344" start="12">
<li data-end="1380" data-start="1344"><strong data-end="1372" data-start="1348">Multi-agent research</strong>（多智能體研究）<strong data-end="1392" data-start="1386">差異</strong>：英文「agent」具備自主行為或決策功能，中文「智能體」強調的是智能或行動個體，但「體」的翻譯可能較模糊，沒有完全涵蓋英文中「agent」的主動性和自決性。</li>
</ol>
<ol data-end="1505" data-start="1473" start="13">
<li data-end="1505" data-start="1473"><strong data-end="1499" data-start="1477">Simulation control</strong>（模擬控制）<strong data-end="1517" data-start="1511">差異</strong>：英文「simulation」強調在虛擬或模擬環境中的控制，而中文「模擬控制」雖然意義相同，但「模擬」一詞在某些語境下會與「模仿」混淆。</li>
</ol>
<ol data-end="1621" data-start="1587" start="14">
<li data-end="1621" data-start="1587"><strong data-end="1612" data-start="1591">3D virtual worlds</strong>（3D 虛擬世界）<strong data-end="1633" data-start="1627">差異</strong>：英文「virtual worlds」通常指的是由電腦生成的虛擬環境，而中文「虛擬世界」在非技術環境中也可能指非現實的想像世界，因此技術語境中需要強調其數位屬性。</li>
</ol>
<p><span style="background-color: #ff99cc;">3.請摘要出下列內容: (放入英文文章內容)</span></p>
<div>
<ul>
<li class="break-words"><strong>What is Webots?</strong><br/> Webots is a professional mobile robot simulation software that provides a rapid prototyping environment. It allows users to create 3D virtual worlds with physics properties (e.g., mass, joints, friction) and add passive or active objects like mobile robots. Users can equip robots with sensors and actuators and program them for desired behaviors. It offers numerous robot models, examples, and interfaces to transfer simulations to real robots like e-puck or Nao.</li>
</ul>
<ul>
<li class="break-words"><strong>What can I do with Webots?</strong><br/> Webots is ideal for research and education in mobile robotics, supporting projects like robot prototyping (e.g., academic, automotive, toy industries), locomotion research (legged, humanoid robots), multi-agent studies (swarm intelligence, collaborative robots), and adaptive behavior research (genetic algorithms, AI). It’s also used for teaching robotics and robot competitions.</li>
</ul>
<ul>
<li class="break-words"><strong>What do I need to know to use Webots?</strong><br/> Basic knowledge of C, C++, Java, Python, or MATLAB is required to program controllers, though beginners can use the graphical BotStudio language for certain robots (e.g., e-puck). To create custom models or environments, familiarity with 3D graphics and VRML97 is needed for designing or importing 3D objects.</li>
</ul>
<ul>
<li class="break-words"><strong>How do I get User Support?</strong><br/> Cyberbotics offers paid support via Premier Service plans and custom development. Community-based support is available through Robotics StackExchange (webots tag), GitHub Discussions (development questions), GitHub Issues (bug reports), and Discord (quick discussions), though responses aren’t guaranteed.</li>
</ul>
<ul>
<li class="break-words"><strong>Webots Simulation</strong><br/> A Webots simulation consists of a world file (.wbt) defining robots and their environment, controller programs (in C/C++/Java/Python/MATLAB), and an optional physics plugin (in C/C++) to adjust physics behavior. World files may rely on external PROTO files and textures.</li>
</ul>
<ul>
<li class="break-words"><strong>What is a World?</strong><br/> A "world" in Webots is a 3D description of robots and their environment, detailing properties like position, geometry, appearance, and physics. Organized hierarchically (like VRML97), world files (.wbt) specify controller names but don’t include the controller code itself.</li>
</ul>
<ul>
<li class="break-words"><strong>What is a Controller?</strong><br/> A controller is a program that directs a robot in a world file, written in C, C++, Java, Python, or MATLAB. Webots launches each controller as a separate process per robot at simulation start. Some languages require compilation (e.g., C/C++), others interpretation (e.g., Python), with files stored in the "controllers" subdirectory.</li>
</ul>
<ul>
<li class="break-words"><strong>What is a Supervisor Controller?</strong><br/> A supervisor controller, tied to a robot with its "supervisor" field set to TRUE, can perform privileged actions (e.g., simulation control, moving robots, recording videos) typically reserved for human operators. Written in any supported language, it has greater capabilities than standard controllers.</li>
</ul>
</div>
<p><span style="background-color: #ff99cc;">4.請列出上述文章中的重要的英文單字與解釋, 以及出現在文句中的用法:</span></p>
<ul>
<li data-sourcepos="3:1-6:53"><strong>Simulation</strong>（模擬）：
<ul data-sourcepos="4:5-6:53">
<li data-sourcepos="4:5-4:27">解釋：使用模型來模仿真實系統或過程的行為。</li>
<li data-sourcepos="5:5-5:71">用法：Webots is a professional mobile robot <strong>simulation</strong> software.</li>
<li data-sourcepos="6:5-6:53">Webots <strong>simulation</strong> consists of a world file.</li>
</ul>
</li>
<li data-sourcepos="7:1-10:72"><strong>Prototyping</strong>（原型製作）：
<ul data-sourcepos="8:5-10:72">
<li data-sourcepos="8:5-8:28">解釋：快速建立一個初步模型，用於測試或演示。</li>
<li data-sourcepos="9:5-9:54">用法：provides a rapid <strong>prototyping</strong> environment.</li>
<li data-sourcepos="10:5-10:72">robot <strong>prototyping</strong> (e.g., academic, automotive, toy industries)</li>
</ul>
</li>
<li data-sourcepos="11:1-13:102"><strong>Actuators</strong>（致動器）：
<ul data-sourcepos="12:5-13:102">
<li data-sourcepos="12:5-12:33">解釋：將信號轉換為機械運動的裝置，用於控制機器或系統。</li>
<li data-sourcepos="13:5-13:102">用法：Users can equip robots with sensors and <strong>actuators</strong> and program them for desired behaviors.</li>
</ul>
</li>
<li data-sourcepos="14:1-16:102"><strong>Sensors</strong>（感測器）：
<ul data-sourcepos="15:5-16:102">
<li data-sourcepos="15:5-15:27">解釋：偵測環境變化並將其轉換為信號的裝置。</li>
<li data-sourcepos="16:5-16:102">用法：Users can equip robots with <strong>sensors</strong> and actuators and program them for desired behaviors.</li>
</ul>
</li>
<li data-sourcepos="17:1-19:55"><strong>Locomotion</strong>（運動）：
<ul data-sourcepos="18:5-19:55">
<li data-sourcepos="18:5-18:23">解釋：生物或機器移動的能力或方式。</li>
<li data-sourcepos="19:5-19:55">用法：locomotion research (legged, humanoid robots).</li>
</ul>
</li>
<li data-sourcepos="20:1-22:72"><strong>Multi-agent</strong>（多智能體）：
<ul data-sourcepos="21:5-22:72">
<li data-sourcepos="21:5-21:31">解釋：由多個自主實體組成的系統，它們可以相互交互。</li>
<li data-sourcepos="22:5-22:72">用法：multi-agent studies (swarm intelligence, collaborative robots).</li>
</ul>
</li>
<li data-sourcepos="23:1-25:61"><strong>Adaptive behavior</strong>（適應性行為）：
<ul data-sourcepos="24:5-25:61">
<li data-sourcepos="24:5-24:26">解釋：系統根據環境變化調整其行為的能力。</li>
<li data-sourcepos="25:5-25:61">用法：adaptive behavior research (genetic algorithms, AI).</li>
</ul>
</li>
<li data-sourcepos="26:1-29:73"><strong>Controller</strong>（控制器）：
<ul data-sourcepos="27:5-29:73">
<li data-sourcepos="27:5-27:22">解釋：控制系統行為的程式或裝置。</li>
<li data-sourcepos="28:5-28:99">用法：Basic knowledge of C, C++, Java, Python, or MATLAB is required to program <strong>controllers</strong>.</li>
<li data-sourcepos="29:5-29:73">A <strong>controller</strong> is a program that directs a robot in a world file.</li>
</ul>
</li>
<li data-sourcepos="30:1-32:64"><strong>Graphical</strong>（圖形的）：
<ul data-sourcepos="31:5-32:64">
<li data-sourcepos="31:5-31:22">解釋：使用圖像或視覺元素表示的。</li>
<li data-sourcepos="32:5-32:64">用法：beginners can use the <strong>graphical</strong> BotStudio language.</li>
</ul>
</li>
<li data-sourcepos="33:1-35:62"><strong>Virtual</strong>（虛擬的）：
<ul data-sourcepos="34:5-35:62">
<li data-sourcepos="34:5-34:23">解釋：模擬或模仿真實環境或物件的。</li>
<li data-sourcepos="35:5-35:62">用法：create 3D <strong>virtual</strong> worlds with physics properties.</li>
</ul>
</li>
<li data-sourcepos="36:1-38:62"><strong>Physics</strong>（物理學）：
<ul data-sourcepos="37:5-38:62">
<li data-sourcepos="37:5-37:26">解釋：研究物質、能量及其相互作用的科學。</li>
<li data-sourcepos="38:5-38:62">用法：create 3D virtual worlds with <strong>physics</strong> properties.</li>
</ul>
</li>
<li data-sourcepos="39:1-41:82"><strong>Plugin</strong>（外掛程式）：
<ul data-sourcepos="40:5-41:82">
<li data-sourcepos="40:5-40:21">解釋：增加軟體功能的程式模組。</li>
<li data-sourcepos="41:5-41:82">用法：and an optional <strong>physics</strong> plugin (in C/C++) to adjust physics behavior.</li>
</ul>
</li>
<li data-sourcepos="42:1-45:123"><strong>Supervisor</strong>（管理者）：
<ul data-sourcepos="43:5-45:123">
<li data-sourcepos="43:5-43:30">解釋：具有特殊權限的控制器，用於監控和控制模擬。</li>
<li data-sourcepos="44:5-44:45">用法：What is a <strong>Supervisor</strong> Controller?</li>
<li data-sourcepos="45:5-45:123">A <strong>supervisor</strong> controller, tied to a robot with its "supervisor" field set to TRUE, can perform privileged actions.</li>
</ul>
</li>
</ul>
<p><span style="background-color: #ff99cc;">5.請詳細說明如何採手動方式在 Webots 建立下列場景:</span></p>
<h4><span style="background-color: #00ffff;">步驟 1：創建新世界</span></h4>
<ol>
<li>
<p><strong>啟動 Webots</strong>：</p>
<ul>
<li>打開 Webots 軟體，並進入主介面。</li>
</ul>
</li>
<li>
<p><strong>創建新世界</strong>：</p>
<ul>
<li>在 Webots 的主畫面中，選擇 <code inline="">File</code> &gt; <code inline="">New World</code>，這會創建一個名為 <code inline="">untitled.wbt</code> 的新世界。</li>
<li>新創建的世界會有一個預設的地面，並且已經設定了一些基本參數。</li>
</ul>
</li>
</ol>
<h4><span style="background-color: #00ffff;">步驟 2：設置桌面結構</span></h4>
<ol>
<li>
<p><strong>新增桌子（Solid）</strong>：</p>
<ul>
<li>在 <code inline="">Scene Tree</code> 中，右鍵點選 <code inline="">WorldInfo</code> 節點，選擇 <code inline="">Add</code> &gt; <code inline="">Solid</code>，會在場景中新增一個 <code inline="">Solid</code> 節點。這個 <code inline="">Solid</code> 節點將代表你的桌子。</li>
</ul>
</li>
<li>
<p><strong>新增桌面的形狀（Shape）</strong>：</p>
<ul>
<li>在 <code inline="">Solid</code> 節點下，右鍵點選 <code inline="">Solid</code> 節點，選擇 <code inline="">Add</code> &gt; <code inline="">Shape</code> &gt; <code inline="">Box</code>。這將創建一個長方體來代表桌面。</li>
</ul>
</li>
<li>
<p><strong>設定桌子尺寸</strong>：</p>
<ul>
<li>點選 <code inline="">Box</code> 節點，然後在右側的屬性面板中設定 <code inline="">size</code> 參數來調整桌子的大小。假設我們的桌子尺寸是 2 米長，1 米寬，0.1 米高，設定如下：</li>
</ul>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">size 2 0.1 1</pre>
</li>
<li>
<p><strong>設置桌子的顏色</strong>：</p>
<ul>
<li>點選 <code inline="">Solid</code> 節點，右鍵選擇 <code inline="">Appearance</code>，然後設定材質的顏色。你可以選擇木色或其他顏色來模擬桌子表面。</li>
</ul>
</li>
</ol>
<h4><span style="background-color: #00ffff;">步驟 3：創建籃球框</span></h4>
<ol>
<li>
<p><strong>新增籃框（Solid）</strong>：</p>
<ul>
<li>在 <code inline="">Scene Tree</code> 中，右鍵點選 <code inline="">WorldInfo</code> 節點，選擇 <code inline="">Add</code> &gt; <code inline="">Solid</code>，再右鍵選擇新創建的 <code inline="">Solid</code> 節點，選擇 <code inline="">Add</code> &gt; <code inline="">Shape</code> &gt; <code inline="">Cylinder</code>。這將創建一個圓柱形的籃框。</li>
</ul>
</li>
<li>
<p><strong>設置籃框的大小與位置</strong>：</p>
<ul>
<li>點選 <code inline="">Cylinder</code> 節點，並在右側屬性面板中設定 <code inline="">radius</code> 和 <code inline="">height</code>。例如：</li>
</ul>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">radius 0.2
height 0.05</pre>
<ul>
<li>設定 <code inline="">translation</code> 來調整籃框的位置。假設我們要把籃框放置在桌面上方，並放置在桌子的遠端。設定如下：</li>
</ul>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">translation 0 0.6 -0.5</pre>
<p>這樣，籃框就會位於桌子的上方，距離桌面的高度為 0.6 米。</p>
</li>
</ol>
<h4><span style="background-color: #00ffff;">步驟 4：創建籃球</span></h4>
<ol>
<li>
<p><strong>新增籃球（Solid）</strong>：</p>
<ul>
<li>在 <code inline="">Scene Tree</code> 中，右鍵點選 <code inline="">WorldInfo</code> 節點，選擇 <code inline="">Add</code> &gt; <code inline="">Solid</code>，然後右鍵選擇新創建的 <code inline="">Solid</code> 節點，選擇 <code inline="">Add</code> &gt; <code inline="">Shape</code> &gt; <code inline="">Sphere</code>。這將創建一個球形的籃球。</li>
</ul>
</li>
<li>
<p><strong>設定籃球大小與顏色</strong>：</p>
<ul>
<li>點選 <code inline="">Sphere</code> 節點，在右側屬性面板中設定 <code inline="">radius</code>，例如將 <code inline="">radius</code> 設定為 0.1 米，代表籃球的直徑為 20 公分。</li>
</ul>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">radius 0.1</pre>
<ul>
<li>設定顏色，為了讓籃球看起來像真實的籃球，可以選擇橙色。這樣籃球就會顯示為橙色。</li>
</ul>
</li>
<li>
<p><strong>設定籃球的位置</strong>：</p>
<ul>
<li>設定 <code inline="">translation</code>，將籃球放置於桌面上方，距離桌面大約 0.2 米。</li>
</ul>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">translation 0 0.2 -0.5</pre>
</li>
</ol>
<h4><span style="background-color: #00ffff;">步驟 5：設置物理屬性</span></h4>
<ol>
<li>
<h4><strong>設定桌子與籃框的物理屬性</strong>：</h4>
<ul>
<li>
<h4>桌子和籃框不需要太多的彈性，但需要摩擦力，這樣物體才能有真實的接觸效果。</h4>
</li>
</ul>
<h4>在 <code inline="">Solid</code> 節點中添加物理屬性設定：</h4>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">Physics { 
        density 1.0 
        friction 0.9 
        bounce 0.0 # 桌子和籃框不會反彈 
}</pre>
<h4><br/><br/></h4>
</li>
<li>
<p><strong>設定籃球的物理屬性</strong>：</p>
<ul>
<li>籃球需要較高的彈性，以便它能夠反彈。可以設置以下屬性：</li>
</ul>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">Physics {
    density 0.5
    friction 0.3
    bounce 0.7  # 籃球有較高的反彈
}</pre>
</li>
</ol>
<h4><span style="background-color: #00ffff;">步驟 6：創建控制器</span></h4>
<ol>
<li>
<h4><strong>創建 Python 控制器程式</strong>：</h4>
<ul>
<li>
<h4>在 Webots 中，你需要使用控制器來控制物體的行為，例如投籃等。創建一個新的 Python 控制器，並將其命名為 <code inline="">basketball_controller.py</code>。</h4>
</li>
</ul>
</li>
<li>
<p><strong>編寫控制器邏輯</strong>：</p>
<ul>
<li>控制器的主要目的是監控籃球的運動，並在籃球進入籃框時進行計分。下面是一個簡單的範例程式，會檢查籃球是否進入籃框範圍。</li>
<li>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">範例程式碼：

from controller import Robot

# 創建 robot 物件來控制 Webots 模擬
robot = Robot()
timestep = int(robot.getBasicTimeStep())

# 獲取籃球的物體
ball = robot.getFromDef("BASKETBALL")
ball_position = ball.getPosition()

# 模擬循環
while robot.step(timestep) != -1:
    # 更新籃球的位置
    ball_position = ball.getPosition()

    # 如果籃球進入籃框範圍，則顯示得分訊息
    if ball_position[0] &gt; 0.5 and ball_position[0] &lt; 1.5 and ball_position[1] &gt; 0.5:
        print("得分！")</pre>
</li>
</ul>
<p></p>
</li>
<li>
<p><strong>連接控制器與世界</strong>：</p>
<ul>
<li>在 Webots 中，點選 <code inline="">WorldInfo</code> 節點，在屬性面板中找到 <code inline="">controller</code> 屬性，並將其設置為剛創建的控制器程式名稱 <code inline="">basketball_controller.py</code>。</li>
</ul>
</li>
</ol>
<h4><span style="background-color: #00ffff;">步驟 7：測試與調整</span></h4>
<ol>
<li>
<p><strong>啟動模擬</strong>：</p>
<ul>
<li>點選 Webots 上方的 <code inline="">Play</code> 按鈕來啟動模擬。</li>
<li>你應該可以看到籃球在桌子上彈跳，並且控制器會檢測籃球是否進入籃框並顯示得分。</li>
</ul>
</li>
<li>
<p><strong>調整參數</strong>：</p>
<ul>
<li>如果籃球的反彈效果或運動不符合預期，可以調整物理屬性（例如彈性、摩擦力、質量）來改善模擬效果。</li>
</ul>
</li>
</ol>
<h4><span style="background-color: #00ffff;">步驟 8：保存與分享</span></h4>
<ol>
<li>
<p><strong>保存世界檔案</strong>：</p>
<ul>
<li>在 Webots 中，選擇 <code inline="">File</code> &gt; <code inline="">Save</code> 來保存你的 <code inline="">.wbt</code> 檔案。</li>
</ul>
</li>
<li>
<p><strong>分享模擬</strong>：</p>
<ul>
<li>你可以將 <code inline="">.wbt</code> 檔案和控制器程式（例如 <code inline="">basketball_controller.py</code>）一起分享，讓其他人可以使用這個模擬。</li>
</ul>
</li>
</ol>
<p><span style="background-color: #ff99cc;"><em><strong>6.</strong></em>希望可以手把手一步步說明該如何利用圖形介面 menu 建立這個場景, 過程中有那些要點必須特別注意?</span></p>
<div>
<div><strong>步驟 1</strong>：<strong>啟動 Webots 並創建新世界：</strong></div>
</div>
<div>
<div>開啟 Webots 後，點擊菜單欄的「File」&gt;「New World」<span><span>(Ctrl+N)-(</span></span>創建一個空白的仿真世界，檔案副檔名為<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">.wbt)</span></div>
<div>
<div><span><strong>要點</strong>：儲存時選擇一個容易找到的路徑，避免後續找不到檔案。</span></div>
<div>
<div><strong>步驊 2</strong>：添加桌面（地面）</div>
</div>
</div>
<div>
<div>     1.在場景樹（Scene Tree，左側）中，右鍵點擊頂層節點（預設為<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">WorldInfo</span>），選擇「Add Node」</div>
<div>     2.在節點選擇視窗中，展開「PROTO nodes (Webots Projects)」&gt;「objects」&gt;「floors」</div>
</div>
<div>     3.選擇<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">RectangleArena</span>，點擊「Add」</div>
<div>     4.在場景樹中點擊<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">RectangleArena</span>，右側屬性面板調整：</div>
<div>
<div><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">         (a.)size</span>：設為<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">1 0.5</span>（長 1m，寬 0.5m，模擬桌面大小）</div>
<div>
<div><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">         (b.)translation</span>：設為<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">0 0 0</span>（放在原點）</div>
<div>
<div><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">         (c.)appearance</span>：點擊後選擇<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">PBRAppearance</span>，設置<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">baseColor</span><span> </span>為木頭色（如<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">0.6 0.3 0.1</span>）</div>
<div>
<div><span><strong>要點</strong>：確保地面有<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">Physics</span><span> </span>節點（預設已有），以啟用物理互動</span></div>
<div>
<div><strong>步驟 3</strong>：添加籃框</div>
<div>
<div>     1.在場景樹中右鍵，選擇「Add Node」</div>
<div>
<div>     2.選擇<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">Base nodes</span><span> </span>&gt;<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">Solid</span>，命名為<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">BasketHoop</span></div>
<div>
<div>     3.為<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">BasketHoop</span><span> </span>添加子節點：</div>
<div>
<div>            (a.)右鍵<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">BasketHoop</span>，選擇「Add Node」&gt;<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">Shape</span></div>
<div>
<div>            (b.)右鍵<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">Shape</span>，選擇「Add Node」&gt;<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">Geometry</span><span> </span>&gt;<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">Cylinder</span></div>
<div>
<div>            (c.)調整<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">Cylinder</span><span> </span>屬性：</div>
<div>
<div><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">                    (I) radius</span>：設為<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">0.1</span>（籃框半徑 10cm）</div>
<div>
<div><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">                   (II) height</span>：設為<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">0.02</span>（籃框厚度 2cm）</div>
<div>
<div><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">                  (III) subdivision</span>：設為<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">32</span>（圓滑度）</div>
</div>
</div>
</div>
<div>
<div>     4.在<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">Shape</span><span> </span>下添加<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">Appearance</span>，設為紅色（<span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">baseColor</span><span> </span>設為<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">1 0 0</span>）</div>
<div>
<div><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">            (a.)translation</span>：設為<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">0.4 0 0.3</span>（桌面邊緣後方，高度 30cm）</div>
<div>
<div>     5.添加物理屬性：</div>
<div>
<div>            (a.)右鍵<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">BasketHoop</span>，選擇「Add Node」&gt;<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">Physics</span>（確保固定不動）</div>
<div>
<div><span><strong>要點</strong>：籃框應為靜態物體，避免被球撞動</span></div>
<div>
<div><strong>步驟 4</strong>：添加籃網（簡化版）</div>
<div>
<div>
<div>     1.在<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">BasketHoop</span><span> </span>下右鍵，選擇「Add Node」&gt;<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">Shape</span></div>
<div>
<div>     2.添加<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">Geometry</span><span> </span>&gt;<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">Cone</span>，模擬籃網：</div>
<div>            (a.)<span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">bottomRadius</span>：設為<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">0.1</span>（與籃框相同）</div>
</div>
<div>            (b.)<span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">height</span>：設為<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">0.15</span>（網長 15cm）</div>
<div>            (c.)<span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">side</span>：設為<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">TRUE</span>，<span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">bottom</span><span> </span>設為<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">FALSE</span>（空心錐形）</div>
<div>     3.調整位置：</div>
<div>
<div><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">            (a.)translation</span>：設為<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">0 0 -0.075</span>（錐形從籃框向下延伸）</div>
</div>
<div>     4.設置外觀：</div>
<div>            (a.)添加<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">Appearance</span>，<span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">baseColor</span><span> </span>設為白色（<span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">1 1 1</span>），<span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">transparency</span><span> </span>設為<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">0.5</span>（半透明網狀感）</div>
</div>
<div><span><strong>要點</strong>：這裡簡化為錐形，實際網狀結構需更複雜的建模，若有需求可後續調整</span></div>
</div>
<div>
<div><strong>步驟 5</strong>：添加籃球</div>
<div>     1.在場景樹頂層右鍵，選擇「Add Node」&gt;<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">Solid</span>，命名為<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">Basketball</span></div>
<div><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn"><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">     2.</span></span>添加子節點：</div>
<div>
<div>
<div><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">            (a.)Shape</span><span> </span>&gt;<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">Geometry</span><span> </span>&gt;<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">Sphere</span>：</div>
<div>
<div><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">                    (I)radius</span>：設為<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">0.03</span>（直徑約 6cm，小型籃球）</div>
</div>
<div><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">            (b.)Appearance</span>：設為橙色（<span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">baseColor</span><span> </span>設為<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">1 0.5 0</span>）</div>
</div>
<div><span><strong>要點</strong>：確保球有物理屬性，且位置不與桌面重疊，否則可能卡住</span></div>
</div>
<div>
<div><strong>步驟 6</strong>：添加投籃機制（簡化為槓桿）
<div>     1.在場景樹頂層右鍵，選擇「Add Node」&gt;<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">Solid</span>，命名為<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">Launcher</span>
<div>     2.添加子節點：</div>
<div>
<div>
<div><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">            (a.)Shape</span><span> </span>&gt;<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">Geometry</span><span> </span>&gt;<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">Box</span>：</div>
<div>
<div><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">                    (I)size</span>：設為<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">0.2 0.05 0.01</span>（長 20cm，寬 5cm，厚 1cm）</div>
</div>
<div>
<div><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">            (b.)Appearance</span>：設為灰色（<span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">baseColor</span><span> </span>設為<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">0.5 0.5 0.5</span>）</div>
</div>
     3.添加物理屬性：</div>
<div>
<div>            (a.)<span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">Physics</span><span> </span>&gt;<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">mass</span><span> </span>設為<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">0.2</span></div>
<div>     4.添加鉸鏈關節（模擬槓桿旋轉）：</div>
<div>
<div>
<div>            (a.)在場景樹頂層右鍵，選擇「Add Node」&gt;<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">HingeJoint</span></div>
<div>
<div>            (b.)在<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">HingeJoint</span><span> </span>的<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">device</span><span> </span>中添加<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">RotationalMotor</span>，命名為<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">LauncherMotor</span></div>
<div>
<div>            (c.)設置<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">jointParameters</span></div>
<div><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn"><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">                    (I)</span></span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">anchor</span>：設為<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">-0.4 0 0</span>（鉸鏈固定在桌面前端）</div>
<div>                   (II)<span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">axis</span>：設為<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">0 1 0</span>（沿 Y 軸旋轉）</div>
<div>            (d.)將<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">Launcher</span><span> </span>拖入<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">HingeJoint</span><span> </span>的<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">endPoint</span><span> </span>欄位</div>
</div>
</div>
</div>
<div>     5.調整<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">Launcher</span><span> </span>位置：
<div><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">            (a.)translation</span>：設為<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">-0.3 0 0.005</span>（與桌面接觸）</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div>
<div><span><strong>要點</strong>：確保槓桿與球初始位置對齊，後續需編寫控制器讓其旋轉</span></div>
</div>
<div>
<div><strong>步驟 7</strong>：設置光源與背景</div>
<div>
<div>     1.添加光源：</div>
<div>
<div>            (a.)場景樹右鍵，選擇「Add Node」&gt;<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">PointLight</span></div>
<div>
<div><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">            (b.)location</span>：設為<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">0 0 1</span>（桌面上方 1m）</div>
<div>
<div><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">            (c.)intensity</span>：設為<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">1</span></div>
</div>
</div>
</div>
<div>
<div>     2.添加背景：</div>
<div><span><span>            (a.)</span></span>場景樹右鍵，選擇「Add Node」&gt;<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">Background</span></div>
<div><span><span>            (b.)</span></span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">skyColor</span>：設為<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">0.5 0.5 1</span>（淺藍色天空）</div>
<div>
<div><span><strong>要點</strong>：光源位置影響陰影效果，確保場景明亮可見</span></div>
</div>
</div>
</div>
<div>
<div><strong>步驟 8</strong>：保存與測試</div>
<div>
<div>     1.點擊「File」&gt;「Save World」</div>
<div>     2.按工具欄「Play」按鈕運行仿真</div>
<div>     3.觀察：</div>
<div>
<div>            (a.)球是否會因重力落在槓桿上</div>
<div>
<div>            (b.)籃框是否穩定</div>
</div>
<div><span><strong>要點</strong>：若球卡住或場景異常，檢查物體的<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">translation</span><span> </span>是否重疊</span></div>
<div><hr/><span></span></div>
<div>
<div><strong>特別注意的要點</strong></div>
<div>
<div>
<ul>
<li class="break-words"><strong>物理屬性</strong>：
<ul class="marker:text-secondary">
<li class="break-words">每個動態物體（如球、槓桿）必須有<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">Physics</span><span> </span>節點，否則不會受重力影響。</li>
<li class="break-words">靜態物體（如籃框）也需<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">Physics</span>，但質量設為 0 或不設值。</li>
</ul>
</li>
<li class="break-words"><strong>位置精確性</strong>：
<ul class="marker:text-secondary">
<li class="break-words">避免物體初始位置重疊，否則可能導致仿真崩潰或物體彈飛。</li>
<li class="break-words">使用屬性面板輸入精確數值，而非僅靠 3D 視圖拖曳。</li>
</ul>
</li>
<li class="break-words"><strong>關節與控制器</strong>：
<ul class="marker:text-secondary">
<li class="break-words">投籃槓桿需要控制器（Controller）驅動<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">RotationalMotor</span>，這部分需額外編寫程式碼（例如用 Python 或 C）。</li>
<li class="break-words">測試時可手動調整槓桿角度（<span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">position</span>），模擬投籃動作。</li>
</ul>
</li>
<li class="break-words"><strong>比例與單位</strong>：
<ul class="marker:text-secondary">
<li class="break-words">Webots 使用公尺作為單位，確保所有尺寸（如籃球半徑、桌面大小）符合現實比例。</li>
</ul>
</li>
<li class="break-words"><strong>性能優化</strong>：
<ul class="marker:text-secondary">
<li class="break-words">避免添加過多複雜節點（如高細分網格），以免仿真變慢。</li>
</ul>
</li>
</ul>
<div><strong>後續建議</strong></div>
<div>
<div>
<ul>
<li class="break-words"><strong>控制器編寫</strong>：為<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">LauncherMotor</span><span> </span>添加一個簡單控制器，讓槓桿按鍵觸發旋轉，模擬投籃。</li>
<li class="break-words"><strong>計分系統</strong>：添加<span> </span><span class="text-sm px-1 rounded-sm !font-mono bg-sunset/10 text-rust dark:bg-dawn/10 dark:text-dawn">TouchSensor</span><span> </span>到籃框，檢測球是否進籃。<br/><br/></li>
</ul>
<p></p>
<h3>Webots</h3>
<p>Webots 是一款功能強大的<span style="background-color: #ffff00;"><strong data-end="32" data-start="16">開源 3D 機器人模擬器</strong></span>，廣泛應用於機器人研究、教育及開發。它具備網頁介面，讓使用者能在瀏覽器中直接執行和觀察機器人模擬，無需安裝桌面應用程式。</p>
<h4>🔍 專案概述（Project Overview）</h4>
<p class="" data-end="317" data-start="130"><strong data-end="136" data-start="130">名稱</strong>：Webots<br data-end="146" data-start="143"/> <strong data-end="152" data-start="146">類型</strong>：開源模擬器<br data-end="161" data-start="158"/> <strong data-end="168" data-start="161">開發者</strong>：Cyberbotics Ltd.<br data-end="188" data-start="185"/> <strong data-end="194" data-start="188">授權</strong>：Apache License 2.0<br data-end="216" data-start="213"/> <strong data-end="224" data-start="216">支援平台</strong>：Windows、Linux、macOS、Web（透過 WebAssembly）<br data-end="267" data-start="264"/> <strong data-end="275" data-start="267">主要語言</strong>：C++，支援 Python、Java、ROS、MATLAB 等語言作為控制程式語言</p>
<hr class="" data-end="322" data-start="319"/>
<h4>🧩 主要特色</h4>
<ul data-end="607" data-start="337">
<li class="" data-end="385" data-start="337">
<p class="" data-end="385" data-start="339"><strong data-end="351" data-start="339">真實世界物理模擬</strong>：採用 ODE 物理引擎（Open Dynamics Engine）</p>
</li>
<li class="" data-end="419" data-start="386">
<p class="" data-end="419" data-start="388"><strong data-end="403" data-start="388">內建感測器與致動器模型</strong>：如攝影機、雷射、IMU、馬達等</p>
</li>
<li class="" data-end="452" data-start="420">
<p class="" data-end="452" data-start="422"><strong data-end="438" data-start="422">3D 模型與環境建構工具</strong>：用戶可以建立完整的模擬場景</p>
</li>
<li class="" data-end="495" data-start="453">
<p class="" data-end="495" data-start="455"><strong data-end="466" data-start="455">多種機器人範本</strong>：提供 KUKA、NAO、Pioneer 等現有機器人模型</p>
</li>
<li class="" data-end="546" data-start="496">
<p class="" data-end="546" data-start="498"><strong data-end="532" data-start="498">支援 ROS（Robot Operating System）</strong>：可與實際 ROS 系統整合</p>
</li>
<li class="" data-end="607" data-start="547">
<p class="" data-end="607" data-start="549"><strong data-end="577" data-start="549">Web 瀏覽器模擬（Webots Online）</strong>：透過 WebAssembly 和 WebGL 技術執行模擬</p>
</li>
</ul>
<hr class="" data-end="612" data-start="609"/>
<h4>🌐 網頁介面特色</h4>
<p class="" data-end="675" data-start="629">Webots 可透過 <strong data-end="657" data-start="640">Webots Online</strong> 或整合到網頁應用中，提供以下功能：</p>
<ul data-end="759" data-start="677">
<li class="" data-end="690" data-start="677">
<p class="" data-end="690" data-start="679">雲端模擬與分享模擬場景</p>
</li>
<li class="" data-end="719" data-start="691">
<p class="" data-end="719" data-start="693">即時視覺化與互動操作（滑鼠控制視角、鍵盤控制機器人）</p>
</li>
<li class="" data-end="743" data-start="720">
<p class="" data-end="743" data-start="722">嵌入式編程介面（可在瀏覽器中撰寫控制代碼）</p>
</li>
<li class="" data-end="759" data-start="744">
<p class="" data-end="759" data-start="746">適合遠端教學與實驗平台建置</p>
</li>
</ul>
<hr class="" data-end="764" data-start="761"/>
<h4>📦 應用領域</h4>
<ul data-end="859" data-start="779">
<li class="" data-end="796" data-start="779">
<p class="" data-end="796" data-start="781">機器人學教育（大學與高中課程）</p>
</li>
<li class="" data-end="811" data-start="797">
<p class="" data-end="811" data-start="799">自主導航與控制演算法開發</p>
</li>
<li class="" data-end="827" data-start="812">
<p class="" data-end="827" data-start="814">人工智慧與機器學習模擬測試</p>
</li>
<li class="" data-end="842" data-start="828">
<p class="" data-end="842" data-start="830">群體機器人協作與通訊模擬</p>
</li>
<li class="" data-end="859" data-start="843">
<p class="" data-end="859" data-start="845">ROS 軟體開發前的測試環境</p>
</li>
</ul>
<hr class="" data-end="864" data-start="861"/>
<h4>🔗 官方資源</h4>
<ul data-end="1013" data-start="879">
<li class="" data-end="913" data-start="879">
<p class="" data-end="913" data-start="881"><a class="" data-end="913" data-start="881" href="https://cyberbotics.com/" rel="noopener" target="_new">官方網站</a></p>
</li>
<li class="" data-end="966" data-start="914">
<p class="" data-end="966" data-start="916"><a class="" data-end="966" data-start="916" href="https://github.com/cyberbotics/webots" rel="noopener" target="_new">GitHub 專案</a></p>
</li>
<li class="" data-end="1013" data-start="967">
<p class="" data-end="1013" data-start="969"><a class="" data-end="1013" data-start="969" href="https://webots.cloud/" rel="noopener" target="_new">Webots Online（網頁模擬）</a></p>
</li>
</ul>
<p></p>
<h3>Blender</h3>
<p><br/>🧊 <strong data-end="83" data-start="59">Blender 基本操作教學（中文說明）</strong></p>
<p>1. 新增 UV 球體</p>
<p class="" data-end="183" data-start="104"><strong data-end="111" data-start="104">步驟：</strong><br data-end="114" data-start="111"/> 選單上點選 <code data-end="129" data-start="120">加入（Add）</code> → <code data-end="142" data-start="132">網格（Mesh）</code> → <code data-end="163" data-start="145">UV 球體（UV Sphere）</code><br data-end="166" data-start="163"/> 📌 用來建立一顆圓形的三維物體。</p>
<hr class="" data-end="188" data-start="185"/>
<h4 data-end="211" data-start="190">2. 縮放物體（放大或縮小）</h4>
<p class="" data-end="286" data-start="212"><strong data-end="219" data-start="212">步驟：</strong><br data-end="222" data-start="219"/> 點選物體 → 按下 <code data-end="235" data-start="232">S</code> 鍵 → 移動滑鼠來縮放 → 點擊左鍵確認縮放。<br data-end="262" data-start="259"/> 📌 <code data-end="268" data-start="265">S</code> 是「Scale（縮放）」的快捷鍵。</p>
<hr class="" data-end="291" data-start="288"/>
<p>3. 移動物體</p>
<p class="" data-end="381" data-start="308"><strong data-end="315" data-start="308">步驟：</strong><br data-end="318" data-start="315"/> 點選物體 → 按下 <code data-end="331" data-start="328">G</code> 鍵 → 移動滑鼠 → 點擊左鍵確認位置。<br data-end="355" data-start="352"/> 📌 <code data-end="361" data-start="358">G</code> 是「Grab（抓取/移動）」的快捷鍵。</p>
<hr class="" data-end="386" data-start="383"/>
<p>4. 更改物體顏色（僅在檢視模式中）</p>
<p class="" data-end="507" data-start="414"><strong data-end="421" data-start="414">步驟：</strong><br data-end="424" data-start="421"/> 選取物體 → 右側屬性欄點選 <code data-end="464" data-start="439">材質屬性（Material Property）</code> →<br data-end="469" data-start="466"/> 找到 <code data-end="497" data-start="472">檢視區顯示（Viewport Display）</code> → 改變「顏色」。</p>
<p class="" data-end="539" data-start="509">📌 這個顏色只會在「實體檢視」模式中顯示，不影響渲染結果。</p>
<hr class="" data-end="544" data-start="541"/>
<p>5. 視角操作（旋轉、平移）</p>
<ul data-end="652" data-start="568">
<li class="" data-end="605" data-start="568">
<p class="" data-end="605" data-start="570"><strong data-end="579" data-start="570">旋轉視角：</strong><br data-end="582" data-start="579"/> 按住滑鼠中鍵（滾輪鍵）拖動，即可旋轉視角。</p>
</li>
<li class="" data-end="652" data-start="607">
<p class="" data-end="652" data-start="609"><strong data-end="618" data-start="609">平移視角：</strong><br data-end="621" data-start="618"/> 按住 <code data-end="633" data-start="626">Shift</code> 鍵 + 滑鼠中鍵拖動，即可平移視角。</p>
</li>
</ul>
<p></p>
<h2>task6 Webots Tutorial 4 ~6 (HW3)</h2>
<p>Webots 串流伺服器操作</p>
<ul data-end="413" data-start="148">
<li class="" data-end="241" data-start="148">
<h4 data-end="159" data-start="150"><strong data-end="159" data-start="150">啟動指令：</strong></h4>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">webotsw --stream
webotsw 是啟動 Webots 的指令，--stream 開啟串流伺服器功能。</pre>
<ul data-end="413" data-start="148">
<li class="" data-end="261" data-start="243">
<p class="" data-end="261" data-start="245"><strong data-end="254" data-start="245">預設埠號：</strong> <code data-end="261" data-start="255">1234</code></p>
</li>
<li class="" data-end="331" data-start="263">
<p class="" data-end="331" data-start="265"><strong data-end="275" data-start="265">推薦瀏覽器：</strong> 在 Windows 系統中，建議使用 <strong data-end="313" data-start="295">Microsoft Edge</strong>，因為其 WebGL2 相容性較好。</p>
</li>
<li class="" data-end="413" data-start="333">
<p class="" data-end="344" data-start="335"><strong data-end="344" data-start="335">連線網址：</strong></p>
<ul data-end="413" data-start="347">
<li class="" data-end="375" data-start="347">
<p class="" data-end="375" data-start="349">本機查看：<a class="" data-end="375" data-start="354" href="http://localhost:1234" rel="noopener" target="_new">http://localhost:1234</a></p>
</li>
<li class="" data-end="413" data-start="378">
<p class="" data-end="413" data-start="380">遠端查看：http://stream_server_ip:1234</p>
</li>
</ul>
</li>
</ul>
<hr class="" data-end="418" data-start="415"/>
<h4 data-end="443" data-start="420">🧾 如何在串流中顯示記分板與計時器？</h4>
<p class="" data-end="494" data-start="445">Webots 內建的 <code data-end="465" data-start="456">Display</code> 元件 <strong data-end="483" data-start="469">無法透過串流畫面顯示</strong>，因此需改用以下方式：</p>
<h4 class="" data-end="537" data-start="496">✅ 方案：使用 7 段顯示器 (<code data-end="536" data-start="517">7 Segment Display</code>)</h4>
<ul data-end="848" data-start="539">
<li class="" data-end="580" data-start="539">
<p class="" data-end="580" data-start="541">將數字拆成 7 個段（a ~ g），每一段是一個 Mesh（.obj 檔案）。</p>
</li>
<li class="" data-end="640" data-start="581">
<p class="" data-end="640" data-start="583">利用 <code data-end="592" data-start="586">.obj</code> 建模好的段件（來自 <code data-end="621" data-start="603">score_counter.7z</code>）以 <code data-end="631" data-start="624">Shape</code> 方式放入場景中。</p>
</li>
<li class="" data-end="848" data-start="641">
<p class="" data-end="648" data-start="643">實作方式：</p>
<ol data-end="848" data-start="651">
<li class="" data-end="690" data-start="651">
<p class="" data-end="690" data-start="654">使用 <code data-end="679" data-start="657">Solid → Shape → Mesh</code> 放入各段（a~g）。</p>
</li>
<li class="" data-end="722" data-start="693">
<p class="" data-end="722" data-start="696">每段的 <code data-end="705" data-start="700">url</code> 指向對應的 <code data-end="718" data-start="712">.obj</code> 檔案。</p>
</li>
<li class="" data-end="792" data-start="725">
<p class="" data-end="792" data-start="728">使用 controller（C/C++/Python）透過 <strong data-end="766" data-start="758">改變顏色</strong>（e.g., 顯示紅色表示亮起）來控制段件是否顯示。</p>
</li>
<li class="" data-end="848" data-start="795">
<p class="" data-end="848" data-start="798">利用 <code data-end="813" data-start="801">Supervisor</code> 模式來控制這些物件的 appearance（顏色）以反映分數或時間。</p>
</li>
</ol>
</li>
</ul>
<hr class="" data-end="853" data-start="850"/>
<h4 data-end="873" data-start="855">🎮 操作示範 (鍵盤互動)</h4>
<ul data-end="962" data-start="875">
<li class="" data-end="904" data-start="875">
<p class="" data-end="904" data-start="877">範例檔案：<code data-end="904" data-start="882">7_segment_display.7z</code></p>
</li>
<li class="" data-end="962" data-start="905">
<p class="" data-end="962" data-start="907">使用鍵盤按鍵 <code data-end="917" data-start="914">r</code>, <code data-end="922" data-start="919">b</code>, <code data-end="927" data-start="924">y</code>, <code data-end="932" data-start="929">g</code> 來切換顯示器中 <code data-end="946" data-start="941">f 段</code> 的顏色，作為控制段顯示的示範。</p>
</li>
</ul>
<hr class="" data-end="967" data-start="964"/>
<h4 data-end="981" data-start="969">🗂 附檔與用途</h4>
<div class="_tableContainer_16hzy_1">
<div class="_tableWrapper_16hzy_14 group flex w-fit flex-col-reverse" tabindex="-1">
<table class="w-fit min-w-(--thread-content-width)" data-end="1183" data-start="983">
<thead data-end="1033" data-start="983">
<tr data-end="1033" data-start="983">
<th data-col-size="sm" data-end="1005" data-start="983">檔名</th>
<th data-col-size="sm" data-end="1033" data-start="1005">說明</th>
</tr>
</thead>
<tbody data-end="1183" data-start="1089">
<tr data-end="1139" data-start="1089">
<td data-col-size="sm" data-end="1113" data-start="1089"><code data-end="1109" data-start="1091">score_counter.7z</code></td>
<td data-col-size="sm" data-end="1139" data-start="1113">7 段顯示器的 Mesh 模型檔案（a~g）</td>
</tr>
<tr data-end="1183" data-start="1140">
<td data-col-size="sm" data-end="1164" data-start="1140"><code data-end="1164" data-start="1142">7_segment_display.7z</code></td>
<td data-col-size="sm" data-end="1183" data-start="1164">示範場景，可使用鍵盤互動</td>
</tr>
</tbody>
</table>
<div class="sticky end-(--thread-content-margin) h-0 self-end select-none">
<div class="absolute end-0 flex items-end"><span class="" data-state="closed"><button class="bg-token-bg-primary hover:bg-token-bg-tertiary text-token-text-secondary my-1 rounded-sm p-1 transition-opacity group-[:not(:hover):not(:focus-within)]:pointer-events-none group-[:not(:hover):not(:focus-within)]:opacity-0"><svg class="icon-md-heavy" fill="none" height="24" viewbox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="M7 5C7 3.34315 8.34315 2 10 2H19C20.6569 2 22 3.34315 22 5V14C22 15.6569 20.6569 17 19 17H17V19C17 20.6569 15.6569 22 14 22H5C3.34315 22 2 20.6569 2 19V10C2 8.34315 3.34315 7 5 7H7V5ZM9 7H14C15.6569 7 17 8.34315 17 10V15H19C19.5523 15 20 14.5523 20 14V5C20 4.44772 19.5523 4 19 4H10C9.44772 4 9 4.44772 9 5V7ZM5 9C4.44772 9 4 9.44772 4 10V19C4 19.5523 4.44772 20 5 20H14C14.5523 20 15 19.5523 15 19V10C15 9.44772 14.5523 9 14 9H5Z" fill="currentColor" fill-rule="evenodd"></path></svg></button></span></div>
</div>
</div>
</div>
<hr class="" data-end="1188" data-start="1185"/>
<h4 data-end="1202" data-start="1190">✅ 建議工作流程</h4>
<ol data-end="1394" data-start="1204">
<li class="" data-end="1250" data-start="1204">
<p class="" data-end="1250" data-start="1207">解壓並匯入 <code data-end="1219" data-start="1213">.wbt</code> 場景與 <code data-end="1230" data-start="1224">.obj</code> 模型檔案至你的 Webots 專案中。</p>
</li>
<li class="" data-end="1291" data-start="1251">
<p class="" data-end="1291" data-start="1254">確保每個 <code data-end="1266" data-start="1259">Shape</code> 指向對應的 <code data-end="1280" data-start="1273">a.obj</code> ~ <code data-end="1290" data-start="1283">g.obj</code>。</p>
</li>
<li class="" data-end="1328" data-start="1292">
<p class="" data-end="1328" data-start="1295">在 controller 中寫入邏輯，依照分數變化控制段件的顏色。</p>
</li>
<li class="" data-end="1365" data-start="1329">
<p class="" data-end="1365" data-start="1332">使用 <code data-end="1347" data-start="1335">Supervisor</code> 控制所有段件（或整個顯示器）狀態。</p>
</li>
<li class="" data-end="1394" data-start="1366">
<p class="" data-end="1394" data-start="1369">測試串流功能，確認遠端瀏覽器能看到正確的顯示結果。</p>
</li>
</ol>
<h4 data-end="159" data-start="150"><br/><br/></h4>
</li>
</ul><h1>Homework</h1>
<p></p>
<p>作業 (30%)</p>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">part1:</p>
<p style="padding-left: 60px;">請各學員在 USB 隨身碟或個人電腦上完成 cd2025 課程所需的可攜系統配置:</p>
<p style="padding-left: 90px;">下載 <a href="http://229.cycu.org/portable_wcm2025.7z">portable_wcm2025.7z</a> (330MB, 解開壓縮後 1.4GB)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a.7z">Webots_2025a.7z</a> (1.5 GB, 解開後約為 2.9GB, 可單獨運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a_web.7z">Webots_2025a_web.7z</a> (171 MB, 解開壓縮後約為 1GB, 必須連網運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Blender4.2.7z">Blender4.2.7z</a></p>
<p style="padding-left: 30px;">part2:</p>
<p style="padding-left: 60px;">請各學員完成可攜程式系統配置後, 利用 Webots R2025a 中寬度與高度都為 0.1m 的 box 物件建立一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 60px;">base (基座) 長度 1m, link1 長度 0.4m, link2 長度 0.6m, link3 長度 0.9m, 各轉軸均為 HingeJoint, joint1 旋轉速度設定為 1radian/sec.</p>
<p style="padding-left: 30px;">part3:</p>
<p style="padding-left: 60px;">模擬場景啟動後, 按下 s 鍵機構開始作動, 按下 p 鍵後機構暫停.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2025_hw1_demo.7z">cd2025_hw1_demo.7z</a></p>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">各學員請利用 CAD 系統依據 HW1 的連桿尺寸與運動方式, 配置適當大小的旋轉軸以及基座後, 利用 Webots R2025a 完成一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/fourbar_slvs.7z">fourbar_slvs.7z</a></p>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p style="padding-left: 30px;">請各分組利用CAD 系統建立一個能在電腦桌 (1600W X 700D X 740H mm) 上運作的投籃機構 (<a href="https://www.youtube.com/watch?v=LloG_Jn_TI0&amp;t=51s">參考影片</a>)後, 導入 Webots R2025a 套件, 建立一個能由使用者透過鍵盤按鍵操作, 且具備計分板的籃球遊戲機模擬系統.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p>參考資料:</p>
<p style="padding-left: 30px;"><a href="/downloads/fourbar_ball_throwing_linkage.slvs">fourbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><a href="/downloads/sixbar_ball_throwing_linkage.slvs">sixbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><img alt="" height="264" src="/images/fourbar_ball_throwing_linkage.gif" width="400"/></p><h2>HW1</h2>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p><span>題目要求尺寸：</span></p>
<p><span> 1.要求地面</span><span>固定桿<span style="background-color: #ffff00;">長度 1m</span></span><span>，</span><span style="background-color: #ffff00;">寬高各為 0.1m</span><span>，</span><span style="background-color: #ffff00;">第一桿長度 0.4m</span><span>，</span><span style="background-color: #ffff00;">第二桿長度 0.6m</span><span>，</span><span style="background-color: #ffff00;">第三桿長度 0.9m</span><span>。</span></p>
<p><span> 2.利用 box 幾何外形節點建立平面四連桿機構的模擬場景。</span></p>
<p><span> 3.務必要按造步驟完成<span style="background-color: #ffff00;">base</span>、<span style="background-color: #ffff00;">joint1(連結桿設定)</span>、<span style="background-color: #ffff00;">joint4後</span>，才可以<span style="background-color: #ffff00;">按fourbar_controller</span>的旋轉命令。</span></p>
<p><span> 4.如果還是看不懂步驟及影片，可以點擊 <a href="https://mde.tw/cd2025/content/Fourbar.html">Fourbar</a>的老師教學。</span></p>
<p>下載檔案 :<a href="/downloads/41223158%20cd2025_webots_hw1.zip"> /downloads/41223158 cd2025_webots_hw1.7z</a></p>
<p><img alt="" height="272" src="/images/螢幕擷取畫面 2025-05-02 140244.png" width="483"/></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/3KheDx4XnQo" width="560"></iframe></span></p>
<p></p>
<p><span style="background-color: #ffff99;">5.四連桿未轉動的原因如下 (請看影片): </span></p>
<p><span style="background-color: #ffff99;">需要將程式帶入 : </span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">from controller import Robot

def run_robot():
    # Create the Robot instance
    robot = Robot()

    # Get simulation time step
    timestep = int(robot.getBasicTimeStep())

    # Get motor device
    motor = robot.getDevice('motor')

    # Set motor for continuous rotation
    motor.setPosition(float('inf'))
    motor.setVelocity(1.0)

    # Main control loop
    while robot.step(timestep) != -1:
        pass

if __name__ == "__main__":
    run_robot()</pre>
<p><span style="background-color: #ffff99;"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/qcg1s7WiyW4" width="560"></iframe></span></p>
<p><span style="background-color: #ffff99;"></span></p><h3>Tutorial1</h3>
<p>Webots練習</p>
<p><span style="background-color: #ffcc00;">下載檔案 :</span> <a href="/downloads/123.7z">/downloads/123.7z</a></p>
<p><img alt="" height="248" src="/images/螢幕擷取畫面 2025-04-24 084116.png" width="565"/></p>
<p><span style="background-color: #ffcc00;">操作影片 :</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/-fqXEiu_S2g" width="560"></iframe></p>
<h2>HW2</h2>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW2 - 學員學號</p>
<p>下載檔案 : <a href="/downloads/fourbar41223158_HW2.7z">/downloads/fourbar41223158_HW2.7z</a></p>
<p><span style="background-color: #00ffff;">分割stl成obj檔指令 :</span></p>
<p><span style="background-color: #ffffff;">按go，出現<span style="background-color: #00ffff;">spit_parts資料夾</span>才是成功轉成obj，也才可以跟Webots做配合。</span></p>
<p><span style="background-color: #ccffff;">分割執行程式下載 :<span style="background-color: #ffffff;"> <a href="/downloads/split_stl_to_obj_scale2_w_mtl.7z" style="background-color: #ffffff;">/downloads/split_stl_to_obj_scale2_w_mtl.7z</a></span></span></p>
<p><span style="background-color: #ffffff;"><img alt="" height="314" src="/images/螢幕擷取畫面 2025-05-12 011555.png" width="535"/></span></p>
<p><span style="background-color: #00ffff;">Webots旋轉指令 :</span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">from controller import Robot

def run_robot():
    # Create the Robot instance
    robot = Robot()

    # Get simulation time step
    timestep = int(robot.getBasicTimeStep())

    # Get motor device
    motor1 = robot.getDevice('joint_motor1')
    #motor2 = robot.getDevice('joint_motor2')
    #motor3 = robot.getDevice('joint_motor3')

    # Set motor for continuous rotation
    motor1.setPosition(float('inf'))
    motor1.setVelocity(1.0)
    """
    motor2.setPosition(float('inf'))
    motor2.setVelocity(1.0)
    motor3.setPosition(float('inf'))
    motor3.setVelocity(1.0)
    """

    # Main control loop
    while robot.step(timestep) != -1:
        pass

if __name__ == "__main__":
    run_robot()</pre>
<h4>1.是用<span style="background-color: #ffff00;">cadshape</span>的無顏色下去組合及模擬。</h4>
<p><img alt="" height="343" src="/images/螢幕擷取畫面 2025-05-11 231932.png" width="550"/></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/nRGVDIsQhrk" width="560"></iframe></p>
<h4><span style="background-color: #ffffff;">2.是用<span style="background-color: #ffff00;">shape</span>的上顏色下去組合及模擬。</span></h4>
<p><span style="background-color: #ffffff;"><img alt="" height="336" src="/images/螢幕擷取畫面 2025-05-12 010040.png" width="569"/></span></p>
<p><span style="background-color: #ffffff;"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/gTJ7HJ7BMBE" width="560"></iframe></span></p>
<p><span style="background-color: #ffffff;"></span></p>
<h4><span style="background-color: #ffffff;">3.<span style="background-color: #ffff00;">Blender</span>切割STL組合</span></h4>
<p><span style="background-color: #ffffff;"><span>從</span><a href="https://mdecd2025.github.io/hw-zhe41223118/content/task3.html">task3</a><span>，繪製好的連桿以程式切割後導入webots組配模擬。(如果使用舊版本可攜程式需 </span><span>pip install numpy</span><span> 安裝</span><a href="https://medium.com/@chiukevin08/numpy%E4%BB%8B%E7%B4%B9-61eb7f288b8d">NumPy</a><span> 套件，否則程式將如法執行)</span></span></p>
<p>Tab鍵切換&gt;A鍵全選&gt;P鍵切換模式&gt;Tab鍵切換&gt;ok</p>
<p><img alt="" height="335" src="/images/螢幕擷取畫面 2025-05-11 232130.png" width="537"/></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/oXku-lfs4GY" width="560"></iframe></p>
<p><span style="background-color: #ffffff;"></span></p><h2>HW3</h2>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW3 - 學員學號</p>
<p><span style="background-color: #00ffff;">下載檔案 :</span> <a href="/downloads/41223158 fourbar_shooter_w7.7z">/downloads/41223158 fourbar_shooter_w7.7z</a></p>
<h4><span style="background-color: #00ccff;">桌上籃球遊戲機球場下載檔案 : <span style="background-color: #ffffff;"><a href="/downloads/41223158 fourbar_shooter_w7-1.7z" style="background-color: #ffffff;">/downloads/41223158 fourbar_shooter_w7-1.7z</a></span></span></h4>
<p>分開的指令程式跟<span style="background-color: #ccffcc;"><a href="https://mdecd2025.github.io/hw-41223158/content/HW2.html" style="background-color: #ccffcc;">HW2</a></span>一樣的做法下去做，<span style="background-color: #ccffff;">假如要分開做的話，要記得將籃框的sti與</span><span><span style="background-color: #ccffff;">桌上籃球遊戲機sti分開執行</span>。</span></p>
<p><span style="background-color: #99ccff;">桌上籃球遊戲機模擬系統程式 : </span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">from controller import Robot

def run_robot():
    # Create the Robot instance
    robot = Robot()

    # Get simulation time step
    timestep = int(robot.getBasicTimeStep())

    # Get motor and keyboard devices
    motor = robot.getDevice('motor1')
    keyboard = robot.getKeyboard()
    keyboard.enable(timestep)

    # Set initial motor position
    initial_position = 0.0  # Assuming initial position is 0

    # Main control loop
    while robot.step(timestep) != -1:
        motor.setPosition(38 * 3.14159 / 180)

if __name__ == "__main__":
    run_robot()</pre>
<h4><span style="background-color: #ccffff;">1.桌上籃球遊戲機</span></h4>
<p><img alt="" height="323" src="/images/螢幕擷取畫面 2025-04-24 044532.png" width="517"/></p>
<p><img alt="" height="308" src="/images/螢幕擷取畫面 2025-05-15 172703.png" width="519"/></p>
<h4><span style="background-color: #ccffff;">2.籃球框</span></h4>
<p><img alt="" height="324" src="/images/螢幕擷取畫面 2025-05-15 171838.png" width="519"/></p>
<p><img alt="" height="299" src="/images/螢幕擷取畫面 2025-05-15 172739.png" width="519"/></p>
<h4><span style="background-color: #ccffff;">3.Webots 桌上籃球遊戲機模擬</span></h4>
<p><img alt="" height="308" src="/images/螢幕擷取畫面 2025-05-15 172639.png" width="522"/></p>
<h4><span style="background-color: #ccffff;">4.影片觀賞:</span></h4>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/h0CSQY61Ru8" width="560"></iframe></p>
<p></p>
<h4><span style="background-color: #ccffff;">桌上籃球遊戲機球場</span></h4>
<p><span style="background-color: #ffffff;"><span style="background-color: #ccffff;"><span style="background-color: #ffffff;">將執行原本的程式</span>motor.setPosition(38 * 3.14159 / 180)</span>&gt;更改成<span style="background-color: #ccffff;">motor.setPosition(28 * 3.14159 / 180)</span>合適的距離。</span></p>
<p><span style="background-color: #ccffff;"><img alt="" height="331" src="/images/螢幕擷取畫面 2025-05-15 224834.png" width="531"/></span></p>
<p><span style="background-color: #ccffff;"><img alt="" height="315" src="/images/螢幕擷取畫面 2025-05-15 224746.png" width="530"/></span></p>
<p><span style="background-color: #ccffff;"></span></p>
<h4><span style="background-color: #ccffff;">影片觀賞:</span></h4>
<p><span style="background-color: #ccffff;"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/ORBRW3pLvRA" width="560"></iframe></span></p><h1>Midterm</h1>
<p>本課程所繳交的期中成績為學員自評之學習期望成績.</p>
<p>期中考週的自評期望成績繳交流程:</p>
<ol>
<li>整理先前所完成的各週的進度、作業網頁內容以及心得</li>
<li>拍攝期中自評影片, 上傳至 Youtube 後, 以"<span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期中自評- 學員學號</span>"為影片標題後嵌入本頁面中</li>
<li>回填期中自評表單</li>
<li>上傳學員期中成績</li>
</ol>
<p>各週進度:</p>
<p>           <span>可以從</span><a href="/get_page/w1">這裡</a><span>來看各週的進度</span></p>
<p>各週網頁內容:</p>
<p>                 <span style="background-color: #ccffff;"> w1-w3</span>是python的更新及<span>列出尚未加入分組的學員</span></p>
<p>                  <span style="background-color: #ccffff;">w4-w8</span>是<span>webots概念與使用方式與solvespace繪製投籃機。</span></p>
<p>期中心得:</p>
<p><span>前四週的課程內容還算順利，但到了第五週，Webots 的相關問題變得明顯複雜。不僅在英文理解上遇到困難，程式撰寫方面也有許多挑戰。雖然可以透過網站上的範本和教學影片來輔助學習，但在設定 IPv6 位址的過程中，仍然碰到不少麻煩，例如資料不正確、金鑰無法匹配，甚至經常出現網路中斷的情況。這些經驗讓我深刻體會到，面對問題時必須保持積極的態度，並且要勇於與同學互動討論，才能更有效地解決問題。</span></p>
<p>期中自評影片:</p>
<p><span style="background-color: #ccffff;">(給我的影片打65分，因為進度落後，目前正在努力中)</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/4CR3uTcz4xk" width="560"></iframe></p>
<p style="padding-left: 30px;"></p><h1>Exam</h1>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p style="padding-left: 30px;">各學員利用 Webots R2025a 套件中的 Shape 物件, 隨堂建立指定的機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景 </p>
<p style="padding-left: 30px;">各學員利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p style="padding-left: 30px;">各分組利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. 過程中各學員必須採同步協同模式, 維護從 Github Classroom 取得的分組協同倉儲以及網站.</p>
<p style="padding-left: 30px;">協同分組方式:</p>
<ol>
<li>分配學員負責利用 Solvespace 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 NX2312 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 Webots 建立機電系統模擬場景, 並利用 Python 程式進行控制, 過程中必須將建構過程拍成帶有說明字幕的影片上傳至分組網頁.</li>
</ol>
<h2>Exam1</h2>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p><span style="background-color: #ffff99;">操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam1 - 學員學號</span></p>
<p><span style="background-color: #ffff99;">1.檔案下載 :</span> <a href="/downloads/41223158 cd2025_webots_Exam1.7z">/downloads/41223158 cd2025_webots_Exam1.7z</a></p>
<p><span style="background-color: #ffff99;"><span style="background-color: #ffffff;">  </span>Solvespace 檔案下載 :<a href="/downloads/41223158%20Exam1.7z"> <span style="background-color: #ffffff;">/downloads/41223158 Solvespace Exam1.7z</span></a></span></p>
<p><span style="background-color: #ffff99;">2.角度單位換算網址 : <span style="background-color: #ffffff;"><a href="https://www.mecalculator.tw/zh-tw/calculators/conversion/angle" style="background-color: #ffffff;">https://www.mecalculator.tw/zh-tw/calculators/conversion/angle</a></span></span></p>
<p><span>利用<span style="background-color: #ffff99;"> Solvespace 繪製當紅色連桿旋轉角度為個人學號最後兩碼時 (單位為 degree)</span> 的線架構圖, 並將此角度作為四連桿的起始旋轉角度.<span style="background-color: #ffff99;">比如58degree轉1.01229<span class="input-group-text border-0 border-bottom rounded-0 bg-white gray-800 fs-14 px-1">rad，剩下的rad</span>弧度自己設計的大概。</span></span><span style="background-color: #ffff99;"> </span></p>
<p><span style="background-color: #ffff99;">程式利用 : <span style="background-color: #ffffff;"></span></span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">from controller import Robot
 
def run_robot():
    # Create the Robot instance
    robot = Robot()
 
    # Get simulation time step
    timestep = int(robot.getBasicTimeStep())
 
    # Get motor device
    motor = robot.getDevice('motor')
 
    # Set motor for continuous rotation
    motor.setPosition(float('inf'))
    motor.setVelocity(1.0)
 
    # Main control loop
    while robot.step(timestep) != -1:
        pass
 
if __name__ == "__main__":
    run_robot()</pre>
<p><span style="background-color: #ffff99;"> Solvespace角度組裝</span></p>
<p><img alt="" height="476" src="/images/螢幕擷取畫面 2025-05-17 231727.png" width="800"/></p>
<p><span style="background-color: #ffff99;"><img alt="" height="432" src="/images/螢幕擷取畫面 2025-05-17 231737.png" width="728"/></span></p>
<p><span style="background-color: #ffff99;"> Webots模擬</span></p>
<p><span style="background-color: #ffff99;"><img alt="" height="312" src="/images/螢幕擷取畫面 2025-05-17 164838.png" width="523"/></span></p>
<p><span style="background-color: #ffff99;"><img alt="" height="315" src="/images/螢幕擷取畫面 2025-05-17 164825.png" width="532"/></span></p>
<p><span style="background-color: #ffff99;">3.影片操作 : </span></p>
<p><span style="background-color: #ffff99;"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/X8qwqdYLmfY" width="560"></iframe></span></p>
<p><span style="background-color: #ffff99;"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/Av5kqbqFZ4U" width="560"></iframe></span></p><h2>Exam2</h2>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam2 - 學員學號</p>
<p><span style="background-color: #ccffff;">下載檔案 : <span style="color: #000000; background-color: #ffffff;"><a href="/downloads/41223158_Exam2.7z" style="color: #000000; background-color: #ffffff;">/downloads/41223158_Exam2.7z</a></span></span></p>
<p><span style="background-color: #ccffff;"><span style="color: #000000; background-color: #ffffff;"><span style="background-color: #ccffff;">在<span>solvespace</span>自己的點位找到自己的xyz軸</span>，JOINT1(0、0、0)、<span>JOINT2(0.8373、1.3399、0)、JOINT3(1.97、2.71、0)、JOINT3(3、0、0)</span></span></span></p>
<p><span style="background-color: #ccffff;"><span style="color: #000000;">程式需要帶入以下 : </span></span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">from controller import Robot

def run_robot():
    # Create the Robot instance
    robot = Robot()

    # Get simulation time step
    timestep = int(robot.getBasicTimeStep())

    # Get motor device
    motor = robot.getDevice('motor')

    # Set motor for continuous rotation
    motor.setPosition(float('inf'))
    motor.setVelocity(1.0)

    # Main control loop
    while robot.step(timestep) != -1:
        pass

if __name__ == "__main__":
    run_robot()</pre>
<p><span style="background-color: #ccffff;"><span style="color: #000000;">solvespace座標 : </span></span></p>
<p><span style="background-color: #ccffff;"><span style="color: #000000; background-color: #ffffff;"><img alt="" height="304" src="/images/螢幕擷取畫面 2025-05-17 231727.png" width="511"/></span></span></p>
<p><span style="background-color: #ccffff;"><span style="color: #000000;">Webots模擬 : </span></span></p>
<p><span style="background-color: #ccffff;"><span style="color: #000000; background-color: #ffffff;"><img alt="" height="302" src="/images/螢幕擷取畫面 2025-05-22 170647.png" width="510"/></span></span></p>
<p><span style="background-color: #ccffff;"><span style="color: #000000;">影片觀看 : </span></span></p>
<p><span style="background-color: #ccffff;"><span style="color: #000000;"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/L6t0GKeyNMs" width="560"></iframe></span></span></p>
<p><span style="background-color: #ccffff;"><span style="color: #000000;"><span>修正影片觀看 : </span></span></span></p>
<p><span style="background-color: #ccffff;"><span style="color: #000000;"><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/THVkgyb_jbE" width="560"></iframe></span></span></span></p><h2>Exam3</h2>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3 - 學員學號</p>
<p><span>1.請每位學員利用在 </span><a href="https://mde.tw/cd2025/content/IPv6.html">https://mde.tw/cd2025/content/IPv6.html</a><span> 中所分配的個人 IPv6 網址, 以 webotsw --stream 啟動個人所完成的 HW1 模擬系統. 並在其餘組員的電腦上, 以瀏覽器檢視啟動串流學員伺服器上的機構模擬. 完成後請各學員將操作與設定說明過程拍成影片, 上傳至 Youtube</span></p>
<p><span>2.請每位學員利用 <a href="https://mdecd2025.github.io/hw-scrum-1/downloads/three_digit_counter.7z">three_digit_counter.7z</a> 中的七段顯示器進行修改, 以 webotsw --stream 啟動後, 可在其餘組員的電腦中, 透過瀏覽器檢視參與協同組員 Webots 中所展示的學員學號. 完成後請各學員將操作與設定說明過程拍成影片, 上傳至 Youtube</span></p>
<p><span>3.請各組利用 <a href="https://mde.tw/cd2025/downloads/youbot_cart_w10_websocket.7z">youbot_cart_w10_websocket.7z</a> 中的 Youbot 底座平台, 由各組組長以 webotsw --stream 啟動後, 可在其餘組員的電腦中, 透過 Websocket 客戶端程式控制平台車的前進、後退與左右轉. 完成後請各學員將操作與設定說明過程拍成影片, 上傳至 Youtube</span></p>
<h4><span style="background-color: #ffff99;">國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3-1 - 學員學號</span></h4>
<h4><span style="background-color: #ffff99;">國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3-2 - 學員學號</span></h4>
<h4><span style="background-color: #ffff99;">國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3-3 - 學員學號</span></h4>
<h4><span style="background-color: #ffffff;">Exam3-1</span></h4>
<h4><span style="background-color: #ffffff;">1.自行操作過程-<span style="background-color: #ffff99;">自己的<a href="https://mdecd2025.github.io/hw-41223158/content/HW1.html" style="background-color: #ffff99;">HW1</a></span></span><span style="background-color: #ffffff;"><span style="background-color: #ffff99;"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/07VdOJEGWDs" width="560"></iframe></span></span></h4>
<h4>2.因紀錄時是有組員配合操作的，所以客戶端操作畫面為，<span style="background-color: #ffff99;">組員 <a href="https://mdecd2025.github.io/hw-41223134/content/Exam3.html" style="background-color: #ffff99;">41223134</a> 操作並錄製其影片</span>，以下是該組員為伺端啟動，個人作為客戶端進行串流至該伺服器<iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/bHag-1uIQDA" width="560"></iframe></h4>
<h4><span style="background-color: #ffffff;">Exam3-2</span></h4>
<p><span style="background-color: #ffffff;"></span></p>
<h4><span style="background-color: #ffffff;">Exam3-3</span></h4>
<h4><span style="background-color: #ffffff;">1.自行操作過程-<span style="background-color: #ffff99;">自己的<a href="/downloads/youbot_cart_w10_websocket.7z">Exam3-3</a></span></span></h4>
<p><span style="background-color: #ffffff;"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/3K6DDUUv3XI" width="560"></iframe></span></p>
<h4>2.紀錄是有組員配合操作的，所以客戶端操作畫面為，<span style="background-color: #ffff99;">組員 <a href="https://mdecd2025.github.io/hw-41223134/content/Exam3.html" style="background-color: #ffff99;">41223134</a> 操作並錄製其影片</span>，以下是該組員為伺端啟動</h4>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/ujyVXH9wujc" width="560"></iframe></p><h1>Final</h1>
<p><span>期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%)</span></p>
<p><span>題目: <span style="background-color: #ccffcc;">Webots 動態投籃模擬系統的協同設計</span></span></p>
<p><span>說明: </span></p>
<p style="padding-left: 30px;"><span>籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上.</span></p>
<p style="padding-left: 30px;"><span>操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止.</span></p>
<p>請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中.</p>
<p>影片標題: <span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題<br/></span></p>
<h1>Brython</h1>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div>